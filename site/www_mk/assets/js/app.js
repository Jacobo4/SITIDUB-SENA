function e(e,t){e.parent();"error"===t?(e.addClass("error"),e.removeClass("correcto"),cumple=0):"valido"===t&&(e.addClass("correcto"),e.removeClass("error"),cumple++)}$("form").submit((function(t){t.preventDefault();var o=$(this).find("input,select").length,r=$(this).find('button[type="submit"]');console.log(o),null!=o&&(r.attr("disabled",!0),setTimeout((function(){r.attr("disabled",!1)}),2e3));const a=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/,i=/^\d+$/;$(this).find("input,select").each((function(t,o){var r=$(o).val(),n=$(o).prop("checked"),c=$(o).val(),l=$(o).parent().find("label");if(0!==$(o).length)switch($(o).attr("type")){case"text":e($(o),""!==r?"valido":"error",!0);break;case"number":i.test($(o).prop("value"))&validarLength(r.length,5,10)?e($(o),"valido",!0):e($(o),"error",!0);break;case"emailCustom":a.test($(o).prop("value"))?e($(o),"valido",!0):e($(o),"error",!0);break;case"checkbox":e(l,!1!==n?"valido":"error",!1);break;case"select":e($(o),1!=c?"valido":"error",!0)}}))})),$(document).ready((function(){$("section#login").hide(),setTimeout((function(){$("section#login").fadeIn(2e3)}),500);(new WOW).init();$('input[type="checkbox"]').click((function(){$(this).prop("checked"),$(this).parent().toggleClass("checked"),console.log($(this).prop("checked")),console.log($(this).parent().before())}))}));var t=2,o=3;
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsImIuanMiLCJjLmpzIl0sIm5hbWVzIjpbInBpbnRhclN0aWxvcyIsImVsZW0iLCJ0aXBvIiwicGFyZW50IiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImN1bXBsZSIsIiQiLCJzdWJtaXQiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwiY2FtcG9zT2JsaWdhIiwidGhpcyIsImZpbmQiLCJsZW5ndGgiLCJib3RvblN1Ym1pdCIsImNvbnNvbGUiLCJsb2ciLCJhdHRyIiwic2V0VGltZW91dCIsInJlZ0V4cEVtYWlsIiwicmVnRXhwTnVtYmVyIiwiZWFjaCIsImkiLCJlIiwidmFsb3JJbnB1dCIsInZhbCIsInZhbG9yQ2hlY2tib3giLCJwcm9wIiwidmFsb3JTZWxlY3QiLCJsYWJlbENoZWNrQm94IiwidGVzdCIsInZhbGlkYXJMZW5ndGgiLCJkb2N1bWVudCIsInJlYWR5IiwiaGlkZSIsImZhZGVJbiIsIldPVyIsImluaXQiLCJjbGljayIsInRvZ2dsZUNsYXNzIiwiYmVmb3JlIiwiYiIsImMiXSwibWFwcGluZ3MiOiJBQW9GQSxTQUFBQSxFQUFBQyxFQUFBQyxHQUNBRCxFQUFBRSxTQUlBLFVBQUFELEdBQ0FELEVBQUFHLFNBQUEsU0FDQUgsRUFBQUksWUFBQSxZQUNBQyxPQUFBLEdBRUEsV0FBQUosSUFFQUQsRUFBQUcsU0FBQSxZQUNBSCxFQUFBSSxZQUFBLFNBQ0FDLFVBbEdBQyxFQUFBLFFBQUFDLFFBQUEsU0FBQUMsR0FDQUEsRUFBQUMsaUJBQ0EsSUFBQUMsRUFBQUosRUFBQUssTUFBQUMsS0FBQSxnQkFBQUMsT0FDQUMsRUFBQVIsRUFBQUssTUFBQUMsS0FBQSx5QkFDQUcsUUFBQUMsSUFBQU4sR0FFQSxNQUFBQSxJQUVBSSxFQUFBRyxLQUFBLFlBQUEsR0FDQUMsWUFBQSxXQUNBSixFQUFBRyxLQUFBLFlBQUEsS0FDQSxNQVFBLE1BQUFFLEVBQUEsMElBQ0FDLEVBQUEsUUFHQWQsRUFBQUssTUFBQUMsS0FBQSxnQkFBQVMsTUFBQSxTQUFBQyxFQUFBQyxHQUVBLElBQUFDLEVBQUFsQixFQUFBaUIsR0FBQUUsTUFDQUMsRUFBQXBCLEVBQUFpQixHQUFBSSxLQUFBLFdBQ0FDLEVBQUF0QixFQUFBaUIsR0FBQUUsTUFDQUksRUFBQXZCLEVBQUFpQixHQUFBckIsU0FBQVUsS0FBQSxTQUdBLEdBQUEsSUFBQU4sRUFBQWlCLEdBQUFWLE9BQ0EsT0FBQVAsRUFBQWlCLEdBQUFOLEtBQUEsU0FDQSxJQUFBLE9BRUFsQixFQUFBTyxFQUFBaUIsR0FEQSxLQUFBQyxFQUNBLFNBRUEsU0FGQSxHQUlBLE1BRUEsSUFBQSxTQUNBSixFQUFBVSxLQUFBeEIsRUFBQWlCLEdBQUFJLEtBQUEsVUFBQUksY0FBQVAsRUFBQVgsT0FBQSxFQUFBLElBQ0FkLEVBQUFPLEVBQUFpQixHQUFBLFVBQUEsR0FFQXhCLEVBQUFPLEVBQUFpQixHQUFBLFNBQUEsR0FFQSxNQUVBLElBQUEsY0FDQUosRUFBQVcsS0FBQXhCLEVBQUFpQixHQUFBSSxLQUFBLFVBQ0E1QixFQUFBTyxFQUFBaUIsR0FBQSxVQUFBLEdBRUF4QixFQUFBTyxFQUFBaUIsR0FBQSxTQUFBLEdBRUEsTUFFQSxJQUFBLFdBRUF4QixFQUFBOEIsR0FEQSxJQUFBSCxFQUNBLFNBRUEsU0FGQSxHQUlBLE1BRUEsSUFBQSxTQUVBM0IsRUFBQU8sRUFBQWlCLEdBREEsR0FBQUssRUFDQSxTQUdBLFNBSEEsVUE4RkF0QixFQUFBMEIsVUFBQUMsT0FBQSxXQUNBM0IsRUFBQSxpQkFBQTRCLE9BQ0FoQixZQUFBLFdBQ0FaLEVBQUEsaUJBQUE2QixPQUFBLE9BQ0EsTUFFQSxJQUFBQyxLQUFBQyxPQUVBL0IsRUFBQSwwQkFBQWdDLE9BQUEsV0FHQWhDLEVBQUFLLE1BQUFnQixLQUFBLFdBQUFyQixFQUFBSyxNQUFBVCxTQUFBcUMsWUFBQSxXQUNBeEIsUUFBQUMsSUFBQVYsRUFBQUssTUFBQWdCLEtBQUEsWUFDQVosUUFBQUMsSUFBQVYsRUFBQUssTUFBQVQsU0FBQXNDLGdCQzlLQSxJQUFBQyxFQUFBLEVDQUFDLEVBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJCgnZm9ybScpLnN1Ym1pdChmdW5jdGlvbihldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB2YXIgY2FtcG9zT2JsaWdhID0gJCh0aGlzKS5maW5kKCdpbnB1dCxzZWxlY3QnKS5sZW5ndGg7XHJcbiAgICAgIHZhciBib3RvblN1Ym1pdCA9ICQodGhpcykuZmluZCgnYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKTtcclxuICAgICAgY29uc29sZS5sb2coY2FtcG9zT2JsaWdhKTtcclxuICAgICAgLy8gRGVzYWJpbGl0YXIgZWwgYm90b24gc3VibWl0XHJcbiAgICAgIGlmIChjYW1wb3NPYmxpZ2EgIT0gbnVsbCkge1xyXG5cclxuICAgICAgICBib3RvblN1Ym1pdC5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBib3RvblN1Ym1pdC5hdHRyKCdkaXNhYmxlZCcsIGZhbHNlKTtcclxuICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICB2YXIgY3VtcGxlID0gMDtcclxuICAgICAgLy9BcnJlZ2xvIGRvbmRlIGFsbWFjZW5hcsOhIGNhZGEgY2FtcG9cclxuICAgICAgLy9leHByZXNpb25lcyBSZWd1bGFyZXNcclxuICAgICAgY29uc3QgcmVnRXhwRW1haWwgPSAvXlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pPyQvO1xyXG4gICAgICBjb25zdCByZWdFeHBOdW1iZXIgPSAvXlxcZCskLztcclxuXHJcbiAgICAgIC8vLy9WYWxpZGFyIGxvcyBjYW1wb3NcclxuICAgICAgJCh0aGlzKS5maW5kKCdpbnB1dCxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuXHJcbiAgICAgICAgdmFyIHZhbG9ySW5wdXQgPSAkKGUpLnZhbCgpO1xyXG4gICAgICAgIHZhciB2YWxvckNoZWNrYm94ID0gJChlKS5wcm9wKCdjaGVja2VkJyk7XHJcbiAgICAgICAgdmFyIHZhbG9yU2VsZWN0ID0gJChlKS52YWwoKTtcclxuICAgICAgICB2YXIgbGFiZWxDaGVja0JveCA9ICQoZSkucGFyZW50KCkuZmluZCgnbGFiZWwnKTtcclxuXHJcblxyXG4gICAgICAgIGlmICgkKGUpLmxlbmd0aCAhPT0gMCkge1xyXG4gICAgICAgICAgc3dpdGNoICgkKGUpLmF0dHIoJ3R5cGUnKSkge1xyXG4gICAgICAgICAgICBjYXNlIFwidGV4dFwiOlxyXG4gICAgICAgICAgICAgIGlmICh2YWxvcklucHV0ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBwaW50YXJTdGlsb3MoJChlKSwgJ3ZhbGlkbycsIHRydWUpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwaW50YXJTdGlsb3MoJChlKSwgJ2Vycm9yJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxyXG4gICAgICAgICAgICAgIGlmICgocmVnRXhwTnVtYmVyLnRlc3QoJChlKS5wcm9wKCd2YWx1ZScpKSkgJiAodmFsaWRhckxlbmd0aCh2YWxvcklucHV0Lmxlbmd0aCwgNSwgMTApKSkge1xyXG4gICAgICAgICAgICAgICAgcGludGFyU3RpbG9zKCQoZSksICd2YWxpZG8nLCB0cnVlKTtcclxuICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGludGFyU3RpbG9zKCQoZSksICdlcnJvcicsIHRydWUpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJlbWFpbEN1c3RvbVwiOlxyXG4gICAgICAgICAgICAgIGlmIChyZWdFeHBFbWFpbC50ZXN0KCQoZSkucHJvcCgndmFsdWUnKSkpIHtcclxuICAgICAgICAgICAgICAgIHBpbnRhclN0aWxvcygkKGUpLCAndmFsaWRvJywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBpbnRhclN0aWxvcygkKGUpLCAnZXJyb3InLCB0cnVlKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgICAgICBpZiAodmFsb3JDaGVja2JveCAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHBpbnRhclN0aWxvcyhsYWJlbENoZWNrQm94LCAndmFsaWRvJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwaW50YXJTdGlsb3MobGFiZWxDaGVja0JveCwgJ2Vycm9yJywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcclxuICAgICAgICAgICAgICBpZiAodmFsb3JTZWxlY3QgIT0gMSkge1xyXG4gICAgICAgICAgICAgICAgcGludGFyU3RpbG9zKCQoZSksICd2YWxpZG8nLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHBpbnRhclN0aWxvcygkKGUpLCAnZXJyb3InLCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vIFBpbnRhIGVzdGlsb3MgZGUgZXJyb3IgeSB2YWxpZG9cclxuICAgIGZ1bmN0aW9uIHBpbnRhclN0aWxvcyhlbGVtLCB0aXBvKSB7XHJcbiAgICAgICB2YXIgY29udGVuZWRvciA9IGVsZW0ucGFyZW50KCk7XHJcbiAgICAgICAvL0ljb25vc1xyXG5cclxuXHJcbiAgICAgICBpZiAodGlwbyA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgZWxlbS5hZGRDbGFzcygnZXJyb3InKTtcclxuICAgICAgICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ2NvcnJlY3RvJyk7XHJcbiAgICAgICAgICBjdW1wbGUgPSAwO1xyXG5cclxuICAgICAgIH0gZWxzZSBpZiAodGlwbyA9PT0gJ3ZhbGlkbycpIHtcclxuXHJcbiAgICAgICAgICBlbGVtLmFkZENsYXNzKCdjb3JyZWN0bycpO1xyXG4gICAgICAgICAgZWxlbS5yZW1vdmVDbGFzcygnZXJyb3InKTtcclxuICAgICAgICAgIGN1bXBsZSsrO1xyXG5cclxuICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAvLyBmdW5jdGlvbiBzaG93QWxlcnQoY3VtcGxlLHRpbWVJbix0aW1lT3V0KXtcclxuICAgIC8vXHJcbiAgICAvLyAgICBjb25zdCBpY29uQWxlcnRDaGVjayA9ICc8cCBjbGFzcz1cImljb24tQWxlcnRBbGVydFdyb25nXCI+PHNwYW4+SGEgaGFiaWRvIHVuIGVycm9yLCByZWNhcmdhIGxhIHDDoWdpbmEgeSB2dWVsdmUgYSBpbnRlbnRhcmxvPC9zcGFuPjwvcD4nO1xyXG4gICAgLy8gICAgY29uc3QgaWNvbkFsZXJ0V3JvbmcgPSAnPGRpdiBjbGFzcz1cImljb24tQWxlcnRBbGVydENoZWNrXCI+PGRpdiBjbGFzcz1cInBhdGgxXCI+PC9kaXY+PGRpdiBjbGFzcz1cInBhdGgyXCI+PHNwYW4+VHUgbWVuc2FqZSBoYSBzaWRvIGVudmlhZG8gY29uIGV4aXRvPC9zcGFuPjwvZGl2PjwvZGl2Pic7XHJcbiAgICAvLyAgICBjb25zdCBkaXZBbGVydCA9ICdkaXYuYWxlcnRGb3JtLWNvbnRhaW5lcic7XHJcbiAgICAvL1xyXG4gICAgLy8gICAgJChkaXZBbGVydCkuZmluZCgnZGl2LmFsZXJ0Rm9ybS1jb250ZW50JykuZW1wdHkoKTtcclxuICAgIC8vXHJcbiAgICAvLyAgICBpZihjdW1wbGUpe1xyXG4gICAgLy8gICAgICAgJChkaXZBbGVydCkuZmluZCgnZGl2LmFsZXJ0Rm9ybS1jb250ZW50JykucmVtb3ZlQ2xhc3MoJ2FsZXJ0RXJyb3InKTtcclxuICAgIC8vICAgICAgICQoZGl2QWxlcnQpLmZpbmQoJ2Rpdi5hbGVydEZvcm0tY29udGVudCcpLmFkZENsYXNzKCdhbGVydENoZWNrJyk7XHJcbiAgICAvLyAgICAgICAkKGRpdkFsZXJ0KS5maW5kKCdkaXYuYWxlcnRGb3JtLWNvbnRlbnQnKS5hcHBlbmQoaWNvbkFsZXJ0V3JvbmcpO1xyXG4gICAgLy8gICAgfWVsc2V7XHJcbiAgICAvLyAgICAgICAkKGRpdkFsZXJ0KS5maW5kKCdkaXYuYWxlcnRGb3JtLWNvbnRlbnQnKS5yZW1vdmVDbGFzcygnYWxlcnRDaGVjaycpO1xyXG4gICAgLy8gICAgICAgJChkaXZBbGVydCkuZmluZCgnZGl2LmFsZXJ0Rm9ybS1jb250ZW50JykuYWRkQ2xhc3MoJ2FsZXJ0RXJyb3InKTtcclxuICAgIC8vICAgICAgICQoZGl2QWxlcnQpLmZpbmQoJ2Rpdi5hbGVydEZvcm0tY29udGVudCcpLmFwcGVuZChpY29uQWxlcnRDaGVjayk7XHJcbiAgICAvLyAgICB9XHJcbiAgICAvLyAgICAkKGRpdkFsZXJ0KS5mYWRlSW4odGltZUluLFwibGluZWFyXCIsZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuICAgIC8vICAgICAgICAgICQoZGl2QWxlcnQpLmZhZGVPdXQoKS5hbmltYXRlKHsnYm90dG9tJzogJzAlJ30sIHtkdXJhdGlvbjogJ3Nsb3cnLCBxdWV1ZTogZmFsc2V9KTtcclxuICAgIC8vICAgICAgIH0sIHRpbWVPdXQpO1xyXG4gICAgLy8gICAgfSkuYW5pbWF0ZSh7J2JvdHRvbSc6ICcxMCUnfSwge2R1cmF0aW9uOiAnc2xvdycsIHF1ZXVlOiBmYWxzZX0pO1xyXG4gICAgLy9cclxuICAgIC8vIH1cclxuICAgIC8vXHJcblxyXG4gICAgLy8gLy8vLy8vLy8vLy8vIFZhbGlkYSBsb25naXR1ZFxyXG4gICAgLy8gZnVuY3Rpb24gdmFsaWRhckxlbmd0aCh2YWxvciwgbWluTGVuZ3RoLCBtYXhMZW5ndGgpIHtcclxuICAgIC8vICAgIGlmICgodmFsb3IgPj0gbWluTGVuZ3RoKSAmICh2YWxvciA8PSBtYXhMZW5ndGgpKSB7XHJcbiAgICAvLyAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIC8vICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAvLyAgICB9XHJcbiAgICAvLyB9XHJcbiAgICAvLyAvLy8vLy8vLy8vLy8gVmFsaWRhIEZvcm11bGFyaW9cclxuICAgIC8vIGZ1bmN0aW9uIHZhbGlkYXJGb3JtKGNhbXBvc09ibGlnYSwgZm9ybSkge1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy9cclxuICAgIC8vICAgIH0pO1xyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gICAgaWYgKGN1bXBsZSA9PT0gY2FtcG9zT2JsaWdhKSB7XHJcbiAgICAvLyAgICAgICBhbGVydCgnQmllbiBwZWxhZG8gOkQnKVxyXG4gICAgLy8gICAgICAgc2hvd0FsZXJ0KGZhbHNlLDUwMCwxMDAwMClcclxuICAgIC8vICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIC8vXHJcbiAgICAvLyAgICB9IGVsc2Uge1xyXG4gICAgLy8gICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gICAgfVxyXG4gICAgLy9cclxuICAgIC8vXHJcbiAgICAvL1xyXG4gICAgLy8gfVxyXG5cclxuXHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcclxuICAgICAgJCgnc2VjdGlvbiNsb2dpbicpLmhpZGUoKTtcclxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAkKCdzZWN0aW9uI2xvZ2luJykuZmFkZUluKDIwMDApO1xyXG4gICAgICB9LCA1MDApO1xyXG5cclxuICAgICAgdmFyIHdvdyA9IG5ldyBXT1coKS5pbml0KCk7XHJcblxyXG4gICAgICAkKCdpbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0nKS5jbGljayhmdW5jdGlvbigpIHtcclxuXHJcblxyXG4gICAgICAgICQodGhpcykucHJvcCgnY2hlY2tlZCcpID8gJCh0aGlzKS5wYXJlbnQoKS50b2dnbGVDbGFzcygnY2hlY2tlZCcpIDogJCh0aGlzKS5wYXJlbnQoKS50b2dnbGVDbGFzcygnY2hlY2tlZCcpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCQodGhpcykucHJvcCgnY2hlY2tlZCcpKTtcclxuICAgICAgICBjb25zb2xlLmxvZygkKHRoaXMpLnBhcmVudCgpLmJlZm9yZSgpKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcbiIsInZhciBiID0gMjtcclxuIiwidmFyIGMgPSAzO1xyXG4iXX0=
