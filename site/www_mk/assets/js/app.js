function e(e,t){"error"===t?(e.addClass("error"),e.removeClass("correcto"),cumple=0):"valido"===t&&(e.addClass("correcto"),e.removeClass("error"),cumple=1)}function t(e,t,n,s){const a=$("div.alert-container"),o="div.alert-content";a.find("div.alert-content").empty(),a.removeClass(),a.addClass("alert-container"),"nice"===e?a.addClass("alert-check").find(o).text("Nice !"):"error"===e?a.addClass("alert-error").find(o).text("Hmm, something went wrong"):"serverDown"===e?a.addClass("alert-server").find(o).text("Maybe the server is down :("):"entryDuplicate"===e?a.addClass("alert-duplicate").find(o).text(s):"dontExists"===e&&a.addClass("alert-dontExists").find(o).text("We couldn't find it :("),a.fadeIn(t,"linear",(function(){setTimeout((function(){a.fadeOut().animate({bottom:"0%"},{duration:"slow",queue:!1})}),n)})).animate({bottom:"20vh"},{duration:"slow",queue:!1})}function n(e,t,n){return!!(e>=t&e<=n)}function s(e){let t=$(e).find("select"),n=$(e).find("input");t.val("default").removeClass("correcto"),n.val("").removeClass("correcto")}function a(t){event.preventDefault();$(t).find("input,select");let s=$(t).find("input:visible,select:visible").length,a=($(t).find('button[type="submit"]'),0);const o=/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/,i=/^\d+$/;return $(t).find("input,select").each((function(t,s){let d=$(s).val(),c=$(s).prop("checked"),r=$(s).val(),l=$(s).parent().find("div.custom-checkbox");if(0!==$(s).length){switch($(s).attr("type")){case"text":case"password":case"date":e($(s),""!==d?"valido":"error");break;case"identification":i.test($(s).prop("value"))&n(d.length,5,14)?e($(s),"valido"):e($(s),"error");break;case"emailCustom":o.test($(s).prop("value"))?e($(s),"valido"):e($(s),"error");break;case"checkbox":e(l,!1!==c?"valido":"error");break;case"select":e($(s),"default"!=r?"valido":"error");break;case"year":i.test($(s).prop("value"))&n(d.length,4,5)?e($(s),"valido"):e($(s),"error")}a+=cumple}})),a===s}var o;$(document).ready((function(){navigator.userAgent.indexOf("Trident/")>-1&&(window.location.href="https://www.google.com.mx/chrome/?brand=CHBF&ds_kid=43700034632748694&utm_source=bing&utm_medium=cpc&utm_campaign=1005992%20%7C%20Chrome%20Win10%20%7C%20DR%20%7C%20ESS01%20%7C%20NA%20%7C%20NA%20%7C%20es%20%7C%20Desk%20%7C%20BING%20SEM%20%7C%20BKWS%20~%20Top%20KWDS%20-%20Exact&utm_term=descargar%20chrome&utm_content=Download%20Chrome%20-%20Exact&gclid=CO70m6TT-eUCFUTCDQodmiwDRQ&gclsrc=ds"),setTimeout((function(){$("section#login").fadeIn(1500).css({display:"flex"})}),500);(new WOW).init();$('input[type="checkbox"]').click((function(){let e=$(this).parent().find("div.custom-checkbox");$(this).prop("checked")?e.text("âœ”"):e.text("")})),$("div.icon-menu").click((function(){let e=$("div.menu-container");"none"==e.css("display")?e.slideDown():e.slideUp()})),$("#acountbtn").click((function(){let e=$(".account-container");"none"==e.css("display")?e.slideDown():e.slideUp()})),$("#editUser").click((function(){$("#modalEditUser").fadeIn().css({display:"flex"})})),$("#newStudent").click((function(){let e=$("#modalNewStudent");$(this).closest(".modal").css({"z-index":"10"}),e.fadeIn().css({display:"flex"})})),$(".btn-cancel").click((function(){$(this).closest(".modal,.modal-tittle").fadeOut(),$(".alert-container").fadeOut()})),$("#btn-editStudent").click((function(){let e=$(this).closest(".modal"),t=e.find("select,input");e.find(".btn-submitModal").fadeIn("500"),t.attr("disabled",!1)})),$(window).resize((function(){window.innerWidth<=520?$("table,.container-payment").css({"overflow-x":"scroll"}):$("table,.container-payment").css({"overflow-x":"hidden"})}))})),$.ajaxSetup({url:"services/process.php",type:"POST",async:!0,error:function(e){t("serverDown",1e3,3e3)}}),$("#logOut").click((function(){$.post("services/login.php?log=false",(function(e){"Cool"==JSON.parse(e).success?location.href="index.php":t("error",1e3,3e3)}))})),$("form#login").submit((function(e){e.preventDefault();let n=$(this),s=n.serialize();console.log(s),n.parent().find(".loading").show(),$.post("services/login.php?log=true",s,(function(e){n.parent().find(".loading").hide(),"Cool"==JSON.parse(e).success?(t("nice",1e3,3e3),location.href="home.php"):t("error",1e3,3e3)}))}));var i=$("#searchAll");function d(e){e.val();let n=e;clearTimeout(o),o=setTimeout((function(){let e="typeForm=searchStudent&"+n.serialize();console.log(e),$.post("services/process.php",e,(function(e){var n=JSON.parse(e);"Error"==n.success?t("error",1e3,3e3):"Don't exists"==n.success?t("dontExists",1e3,3e3):($("table#students").fadeIn(500),c(n))}))}),1e3)}function c(e){let t=e.slice(-1)[0].rol,n=null;switch(t){case"Administrador":n='<span class="icon-eye"></span><span class="icon-coin-dollar"></span><span class="icon-plus"></span><span class="icon-bin"></span>';break;case"Coordinador":n='<span class="icon-eye"></span>';break;case"Tesorero":n='<span class="icon-eye"></span><span class="icon-coin-dollar"></span>'}e.pop(-1),$("#showStudents").empty(),$.each(e.slice(0),(function(e,t){$("#showStudents").append(`\n      <tr>\n        <td data-student="${r(t.id)}">${e+1}</td>\n        <td>${r(t.descripcion_tdoc)}</td>\n        <td data-ndoc="${r(t.ndoc)}">${r(t.ndoc)}</td>\n        <td>${r(t.nombre1)} ${r(t.nombre2)}</td>\n        <td>${r(t.apellido1)} ${r(t.apellido2)}</td>\n        <td class="table-options">${n}</td>\n      </tr>\n      `)})),l()}function r(e){return"NULL"===e?"":e}function l(){$("span.icon-coin-dollar").click((function(){let e=$("#modalPayments"),n=$(this).closest("tr").find("td[data-student]").attr("data-student");e.fadeIn().css({display:"flex"}),$("div.month span.icon-IconArrowPurple").click((function(){let e=$(this),s=e.closest("li").find("div.container-payment"),a=e.parent().attr("data-month"),o=e.closest(".modal").find("#searchPayments").val(),i=`typeForm=searhPayments&idStudent=${n}&year=${o}&month=${a}`;console.log(i),$.post("services/process.php",i,(function(e){var n=JSON.parse(e);console.table(n),"Error"==n.success?t("error",1e3,3e3):"Don't exists"==n.success?t("dontExists",1e3,3e3):(!function(e,t){let n=$(t).find("tbody.showPayments");$(n).empty(),$.each(e,(function(e,t){$(n).append(`\n            <tr>\n              <td>${e+1}</td>\n              <td>${t.consecutivo}</td>\n              <td>${t.fecha_pago}</td>\n              <td>${t.periodo_inicial}</td>\n              <td>${t.periodo_final}</td>\n              <td>${t.valor_cancelado}</td>\n              <td class="table-options"><span class="icon-bin"></span></td>\n            </tr>\n            `)}))}(n,s),s.slideToggle())}))})),$("div.month span.icon-plus").click((function(){let e=$(this),o=e.parent().attr("data-month"),i=e.closest(".modal").find("#searchPayments").val(),d=`typeForm=getMonth&idStudent=${n}&year=${i}&month=${o}`;console.log(d),$.post("services/process.php",d,(function(n){var s=JSON.parse(n);console.log(s[0].id),"Error"==s.success?t("error",1e3,3e3):(e.closest("li").find("div.month").attr("data-cuota",s[0].id),e.closest("li").find(".container-addPayment").slideToggle())}));var c=!1;$("form.addPayment").submit((function(e){let n=this,o=$(n).attr("class"),i=$(n).closest("li").find("div.month").attr("data-cuota");if(!c&&a(this)){let e=`typeForm=${o}&cuota=${i}&${$(n).serialize()}`;console.log(e),$.ajax({data:e,beforeSend:function(){$(n).parent().find(".loading").show()},success:function(e){c=!0,$(n).parent().find(".loading").fadeOut(1e3);var a=JSON.parse(e);"Cool"==a.success?(s(n),t("nice",1e3,3e3)):"Error"==a.success?t("error",1e3,3e3):"Entry duplicate"==a.success&&t("entryDuplicate",1e3,3e3,"This relative already exists")}})}}))}))})),$("span.icon-bin").click((function(){let n=$("#modalDelete"),a=n.find("input"),o=$(this).closest("tr").find("td[data-student]").attr("data-student"),i=$(this).closest("tr").find("td[data-ndoc]").attr("data-ndoc");a.attr("data-student",o),n.fadeIn().css({display:"flex"}),$("form#deleteStudent").submit((function(n){n.preventDefault();let a=this,d=$(this).closest(".modal"),c=$(this).attr("id"),r=$(this).find("input"),l=$("#showStudents").find(`td[data-student="${o}"]`).closest("tr");if(r.val()!==i)e($(r),"error");else{e($(r),"valido");let n=`typeForm=${c}&idStudent=${o}&${$(a).serialize()}`;console.log(n),$.ajax({data:n,beforeSend:function(){$(a).parent().find(".loading").show()},success:function(e){$(a).parent().find(".loading").fadeOut(1e3);var n=JSON.parse(e);"Cool"==n.success?(l.remove(),d.fadeOut(),s(a),t("nice",1e3,3e3)):"Error"==n.success&&t("error",1e3,3e3)}})}}))})),$("span.icon-eye").click((function(){let e=$("#modalEditShow"),n=`typeForm=showStudentInfo&idStudent=${$(this).closest("tr").find("td[data-student]").attr("data-student")}`;$.post("services/process.php",n,(function(n){var s=JSON.parse(n);"Error"==s.success?t("error",1e3,3e3):"Don't exists"==s.success?t("dontExists",1e3,3e3):function(e,t){let n=t.find("select,input"),s=t.find(".btn-submitModal");var a={tittle:$("#personName"),names:$("#editNombresEstu"),surnames:$("#editApellidosEstu"),numIdent:$("#editNumIdentEstu"),tdoc:$("#editTipoIdentEstu"),expeditionPlace:$("#editLugarExpe"),birthdate:$("#editFechaNaci"),birthplace:$("#editLugarNaci"),address:$("#editDireccionEstu"),email:$("#editEmailEstu"),tel1:$("#editTelResiEstu"),eps:$("#editEps"),rh:$("#editRh"),income:$("#editEstrato")};t.fadeIn().css({display:"flex"}),n.attr("disabled",!0),s.hide(),a.tittle.attr("data-student",e[0].id),a.tittle.text(`${r(e[0].nombre1)} ${r(e[0].nombre2)} ${r(e[0].apellido1)} ${r(e[0].apellido2)}`),a.names.val(`${r(e[0].nombre1)} ${r(e[0].nombre2)}`),a.surnames.val(`${r(e[0].apellido1)} ${r(e[0].apellido2)}`),a.numIdent.val(`${r(e[0].ndoc)}`),a.tdoc.val(`${r(e[0].tdoc_persona)}`),a.expeditionPlace.val(`${r(e[0].lugar_expedicion)}`),a.birthdate.val(`${r(e[0].fecha_nacimiento)}`),a.birthplace.val(`${r(e[0].lugar_nacimiento)}`),a.address.val(`${r(e[0].direccion)}`),a.email.val(`${r(e[0].email)}`),a.tel1.val(`${r(e[0].tel1)}`),a.eps.val(`${r(e[0].eps)}`),a.rh.val(`${r(e[0].rh)}`),a.income.val(`${r(e[0].estrato)}`)}(s,e)}))})),$("#showStudents span.icon-plus").click((function(){let e=$("#modalMatricula"),n=(e.find("input#numMatri"),$(this).closest("tr").find("td[data-student]").attr("data-student"));$(this).closest("tr").find("td[data-student]").attr("data-student");e.fadeIn().css({display:"flex"}),e.find("h1").text("juan"),$("form#insertMatricula").submit((function(e){e.preventDefault();let o=this,i=$(this).closest(".modal"),d=$(this).attr("id");if(a(this)){let e=`typeForm=${d}&idStudent=${n}&${$(o).serialize()}`;console.log(e),$.ajax({data:e,beforeSend:function(){$(o).parent().find(".loading").show()},success:function(e){$(o).parent().find(".loading").fadeOut(1e3);var n=JSON.parse(e);"Cool"==n.success?(i.fadeOut(),s(o),t("nice",1e3,3e3)):"Error"==n.success?t("error",1e3,3e3):"Entry duplicate"==n.success&&t("entryDuplicate",1e3,3e3,"This student already exists")}})}}))}))}function u(e,n=!0){let o=$(e).attr("id");if(a(e)){var i=`typeForm=${o}&${$(e).serialize()}`;console.log(i),$.ajax({data:i,beforeSend:function(){$(e).parent().find(".loading").show()},success:function(a){$(e).parent().find(".loading").fadeOut(1e3);var o=JSON.parse(a);"Cool"==o.success?(n&&$(e).closest(".modal").fadeOut(),s(e),t("nice",1e3,3e3)):"Error"==o.success?t("error",1e3,3e3):"Entry duplicate"==o.success&&t("entryDuplicate",1e3,3e3,"This student already exists")}})}}i.keypress((function(){i.val().length>0&&d(i)})),$("span.icon-search").click((function(){i.val().length>0&&d(i)})),$("form.edit").submit((function(e){let n=this,o=$(n).closest(".modal"),c=$(n).attr("id"),r=$("#personName").attr("data-student");$(n).find("input"),$(n).find("select");$(n).serialize();if(a(n)){let e=`typeForm=${c}&idStudent=${r}&${$(n).serialize()}`;console.log(e),$.ajax({data:e,beforeSend:function(){$(n).parent().find(".loading").show()},success:function(e){$(n).parent().find(".loading").fadeOut(1e3);var a=JSON.parse(e);"Cool"==a.success?(o.fadeOut(),s(n),d(i),t("nice",1e3,3e3)):"Error"==a.success&&t("error",1e3,3e3)}})}})),$("form#editUsername").submit((function(e){u(this,!1)})),$("form#editPassword").submit((function(e){u(this,!1)})),$("form#insertStudent").submit((function(e){u(this)})),$("#addRelative").click((function(){let e=$("#modalNewRelative"),n=$(this).closest(".modal"),o=n.find("#personName").attr("data-student");n.css({"z-index":"10"}),e.fadeIn().css({display:"flex"});var i=!1;$("form#insertRelative").submit((function(e){let n=$(this),d=n.attr("id");n.find('button[type="submit"]');if(a(n)&&!i){let e=`typeForm=${d}&idStudent=${o}&${n.serialize()}`;console.log(e),$.ajax({data:e,beforeSend:function(){n.parent().find(".loading").show()},success:function(e){i=!0,n.parent().find(".loading").fadeOut(1e3);var a=JSON.parse(e);"Cool"==a.success?(n.closest(".modal").fadeOut(),s(n),t("nice",1e3,3e3)):"Error"==a.success?t("error",1e3,3e3):"Entry duplicate"==a.success&&t("entryDuplicate",1e3,3e3,"This relative already exists")}})}}))})),$.getJSON("assets/json/citys.json",(function(e){var t=[];let n=$("select.citys");for(var s=0;s<e.length;s++)for(var a=0;a<e[s].ciudades.length;a++)t.push("<option value='"+e[s].ciudades[a]+"'>"+e[s].departamento+"-"+e[s].ciudades[a]+"</option>");for(s=0;s<t.length;s++)n.append(t[s])})),$.getJSON("assets/json/bloodTypes.json",(function(e){var t=[];let n=$("select.bloodTypes");$.each(e,(function(e){t.push("<option value='"+e+"'>"+e+"</option>")}));for(var s=0;s<t.length;s++)n.append(t[s])})),$.getJSON("assets/json/eps.json",(function(e){var t=[];let n=$("select.epss");$.each(e,(function(e,n){t.push("<option value='"+n.name+"'>"+n.name+"</option>")}));for(var s=0;s<t.length;s++)n.append(t[s])})),$.getJSON("assets/json/grades.json",(function(e){var t=[];let n=$("select.grades");$.each(e,(function(e,n){t.push("<option value='"+n.name+"'>"+n.name+"</option>")}));for(var s=0;s<t.length;s++)n.append(t[s])}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9fZm9ybXMuanMiLCJfZG9tLmpzIl0sIm5hbWVzIjpbInBpbnRhclN0aWxvcyIsImVsZW0iLCJ0aXBvIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImN1bXBsZSIsInNob3dBbGVydCIsInR5cGUiLCJ0aW1lSW4iLCJ0aW1lT3V0IiwibWVzc2FnZSIsImRpdkFsZXJ0IiwiJCIsImNvbnRlbnRBbGVydCIsImZpbmQiLCJlbXB0eSIsInRleHQiLCJmYWRlSW4iLCJzZXRUaW1lb3V0IiwiZmFkZU91dCIsImFuaW1hdGUiLCJib3R0b20iLCJkdXJhdGlvbiIsInF1ZXVlIiwidmFsaWRhdGVMZW5ndGgiLCJ2YWxvciIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsImVtcHR5Q2xhc3MiLCJmb3JtIiwic2VsZWN0cyIsImlucHV0cyIsInZhbCIsInZhbGlkYXRlRm9ybSIsImV2ZW50IiwicHJldmVudERlZmF1bHQiLCJjYW1wb3NPYmxpZ2EiLCJsZW5ndGgiLCJ0b3RhbCIsInJlZ0V4cEVtYWlsIiwicmVnRXhwTnVtYmVyIiwiZWFjaCIsImkiLCJlIiwidmFsb3JJbnB1dCIsInZhbG9yQ2hlY2tib3giLCJwcm9wIiwidmFsb3JTZWxlY3QiLCJjdXN0b21EaXZDaGVjayIsInBhcmVudCIsImF0dHIiLCJ0ZXN0IiwicGV0aWNpb24iLCJkb2N1bWVudCIsInJlYWR5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsIndpbmRvdyIsImxvY2F0aW9uIiwiaHJlZiIsImNzcyIsImRpc3BsYXkiLCJXT1ciLCJpbml0IiwiY2xpY2siLCJjdXN0b21DaGVjayIsInRoaXMiLCJtZW51Iiwic2xpZGVEb3duIiwic2xpZGVVcCIsImFjb3VudENvbnRhaW5lciIsIm1vZGFsIiwiY2xvc2VzdCIsInotaW5kZXgiLCJyZXNpemUiLCJpbm5lcldpZHRoIiwib3ZlcmZsb3cteCIsImFqYXhTZXR1cCIsInVybCIsImFzeW5jIiwiZXJyb3IiLCJyZXNwb25zZSIsInBvc3QiLCJKU09OIiwicGFyc2UiLCJzdWNjZXNzIiwic3VibWl0IiwiZm9ybXVsYXJpbyIsImRhdGEiLCJzZXJpYWxpemUiLCJjb25zb2xlIiwibG9nIiwic2hvdyIsImhpZGUiLCJidXR0b25TZWFyY2giLCJzZWFyY2hTdHVkZW50IiwiYnV0dG9uIiwiaW5wdXQiLCJjbGVhclRpbWVvdXQiLCJzdHVkZW50cyIsInNob3dTdHVkZW50cyIsInJvbCIsInNsaWNlIiwicm9sZU9wdGlvbnMiLCJwb3AiLCJpZCIsInN0dWRlbnQiLCJhcHBlbmQiLCJjaGFuZ2VOdWxsVmFsdWUiLCJkZXNjcmlwY2lvbl90ZG9jIiwibmRvYyIsIm5vbWJyZTEiLCJub21icmUyIiwiYXBlbGxpZG8xIiwiYXBlbGxpZG8yIiwib3B0aW9uc1N0dWRlbnRzIiwic3RyaW5nIiwibW9kYWxQYXltZW50cyIsImlkU3R1ZGVudCIsInB1cnBsZUFycm93IiwicGF5bWVudENvbnRhaW5lciIsIm1vbnRoIiwieWVhciIsInBheW1lbnRzIiwidGFibGUiLCJyb3ciLCJpbmRleCIsInBheW1lbnQiLCJjb25zZWN1dGl2byIsImZlY2hhX3BhZ28iLCJwZXJpb2RvX2luaWNpYWwiLCJwZXJpb2RvX2ZpbmFsIiwidmFsb3JfY2FuY2VsYWRvIiwic2hvd1BheW1lbnRzIiwic2xpZGVUb2dnbGUiLCJwbHVzQnV0dG9uIiwiY3VvdGEiLCJsb2NraSIsInR5cGVGb3JtIiwiYWpheCIsImJlZm9yZVNlbmQiLCJqc29uRGF0YSIsIm1vZGFsRGVsZXRlIiwiaW5wdXRNb2RhbCIsIm51bURvY1N0dWRlbnQiLCJ0clN0dWRlbnQiLCJyZW1vdmUiLCJtb2RhbFNob3ciLCJzdHVkZW50SW5mbyIsInNhdmVCdXR0b25zIiwic3R1ZGVudElucHV0cyIsInRpdHRsZSIsIm5hbWVzIiwic3VybmFtZXMiLCJudW1JZGVudCIsInRkb2MiLCJleHBlZGl0aW9uUGxhY2UiLCJiaXJ0aGRhdGUiLCJiaXJ0aHBsYWNlIiwiYWRkcmVzcyIsImVtYWlsIiwidGVsMSIsImVwcyIsInJoIiwiaW5jb21lIiwidGRvY19wZXJzb25hIiwibHVnYXJfZXhwZWRpY2lvbiIsImZlY2hhX25hY2ltaWVudG8iLCJsdWdhcl9uYWNpbWllbnRvIiwiZGlyZWNjaW9uIiwiZXN0cmF0byIsInNob3dTdHVkZW50SW5mbyIsIm1vZGFsTWF0cmkiLCJpbnNlcnRQZXJzb24iLCJjbG9zZU1vZGFsIiwia2V5cHJlc3MiLCJjbG9zZXN0TW9kYWwiLCJsb2NrIiwiZ2V0SlNPTiIsIm9wdGlvbnMiLCJzZWxlY3QiLCJ6IiwiY2l1ZGFkZXMiLCJwdXNoIiwiZGVwYXJ0YW1lbnRvIiwia2V5IiwibmFtZSJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBQUEsRUFBQUMsRUFBQUMsR0FFQSxVQUFBQSxHQUNBRCxFQUFBRSxTQUFBLFNBQ0FGLEVBQUFHLFlBQUEsWUFDQUMsT0FBQSxHQUVBLFdBQUFILElBQ0FELEVBQUFFLFNBQUEsWUFDQUYsRUFBQUcsWUFBQSxTQUNBQyxPQUFBLEdBTUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQSxNQUFBQyxFQUFBQyxFQUFBLHVCQUNBQyxFQUFBLG9CQUVBRixFQUFBRyxLQUFBLHFCQUFBQyxRQUNBSixFQUFBUCxjQUNBTyxFQUFBUixTQUFBLG1CQUVBLFNBQUFJLEVBQ0FJLEVBQUFSLFNBQUEsZUFBQVcsS0FBQUQsR0FBQUcsS0FBQSxVQUVBLFVBQUFULEVBQ0FJLEVBQUFSLFNBQUEsZUFBQVcsS0FBQUQsR0FBQUcsS0FBQSw2QkFFQSxlQUFBVCxFQUNBSSxFQUFBUixTQUFBLGdCQUFBVyxLQUFBRCxHQUFBRyxLQUFBLCtCQUVBLG1CQUFBVCxFQUNBSSxFQUFBUixTQUFBLG1CQUFBVyxLQUFBRCxHQUFBRyxLQUFBTixHQUVBLGVBQUFILEdBQ0FJLEVBQUFSLFNBQUEsb0JBQUFXLEtBQUFELEdBQUFHLEtBQUEsMEJBR0FMLEVBQUFNLE9BQUFULEVBQUEsVUFBQSxXQUNBVSxZQUFBLFdBQ0FQLEVBQUFRLFVBQUFDLFFBQUEsQ0FDQUMsT0FBQSxNQUNBLENBQ0FDLFNBQUEs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T0FLQTlCLEVBQUF1SyxRQUFBLDJCQUFBLFNBQUExRixHQUVBLElBQUEyRixFQUFBLEdBQ0EsSUFBQUMsRUFBQXpLLEVBQUEsaUJBRUFBLEVBQUE2QixLQUFBZ0QsR0FBQSxTQUFBaUcsRUFBQXZCLEdBRUFpQixFQUFBSSxLQUFBLGtCQUFBckIsRUFBQXdCLEtBQUEsS0FBQXhCLEVBQUF3QixLQUFBLGdCQUdBLElBQUEsSUFBQWpKLEVBQUEsRUFBQUEsRUFBQTBJLEVBQUEvSSxPQUFBSyxJQUNBMkksRUFBQXpFLE9BQUF3RSxFQUFBMUkiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vIFBpbnRhIGVzdGlsb3MgZGUgZXJyb3IgeSB2YWxpZG9cclxuZnVuY3Rpb24gcGludGFyU3RpbG9zKGVsZW0sIHRpcG8pIHtcclxuXHJcbiAgaWYgKHRpcG8gPT09ICdlcnJvcicpIHtcclxuICAgIGVsZW0uYWRkQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICBlbGVtLnJlbW92ZUNsYXNzKCdjb3JyZWN0bycpO1xyXG4gICAgY3VtcGxlID0gMDtcclxuXHJcbiAgfSBlbHNlIGlmICh0aXBvID09PSAndmFsaWRvJykge1xyXG4gICAgZWxlbS5hZGRDbGFzcygnY29ycmVjdG8nKTtcclxuICAgIGVsZW0ucmVtb3ZlQ2xhc3MoJ2Vycm9yJyk7XHJcbiAgICBjdW1wbGUgPSAxO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbi8vLy8vLy8vLy8vLyBNdWVzdHJhIGFsZXJ0YSBkZSBsb3MgZm9ybXVsYXJpb3NcclxuZnVuY3Rpb24gc2hvd0FsZXJ0KHR5cGUsIHRpbWVJbiwgdGltZU91dCwgbWVzc2FnZSkge1xyXG5cclxuICBjb25zdCBkaXZBbGVydCA9ICQoJ2Rpdi5hbGVydC1jb250YWluZXInKTtcclxuICBjb25zdCBjb250ZW50QWxlcnQgPSAnZGl2LmFsZXJ0LWNvbnRlbnQnO1xyXG5cclxuICBkaXZBbGVydC5maW5kKCdkaXYuYWxlcnQtY29udGVudCcpLmVtcHR5KCk7XHJcbiAgZGl2QWxlcnQucmVtb3ZlQ2xhc3MoKTtcclxuICBkaXZBbGVydC5hZGRDbGFzcygnYWxlcnQtY29udGFpbmVyJyk7XHJcblxyXG4gIGlmICh0eXBlID09PSBcIm5pY2VcIikge1xyXG4gICAgZGl2QWxlcnQuYWRkQ2xhc3MoJ2FsZXJ0LWNoZWNrJykuZmluZChjb250ZW50QWxlcnQpLnRleHQoJ05pY2UgIScpO1xyXG5cclxuICB9IGVsc2UgaWYgKHR5cGUgPT09IFwiZXJyb3JcIikge1xyXG4gICAgZGl2QWxlcnQuYWRkQ2xhc3MoJ2FsZXJ0LWVycm9yJykuZmluZChjb250ZW50QWxlcnQpLnRleHQoJ0htbSwgc29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcclxuXHJcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcInNlcnZlckRvd25cIikge1xyXG4gICAgZGl2QWxlcnQuYWRkQ2xhc3MoJ2FsZXJ0LXNlcnZlcicpLmZpbmQoY29udGVudEFsZXJ0KS50ZXh0KCdNYXliZSB0aGUgc2VydmVyIGlzIGRvd24gOignKTtcclxuXHJcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImVudHJ5RHVwbGljYXRlXCIpIHtcclxuICAgIGRpdkFsZXJ0LmFkZENsYXNzKCdhbGVydC1kdXBsaWNhdGUnKS5maW5kKGNvbnRlbnRBbGVydCkudGV4dChtZXNzYWdlKTtcclxuXHJcbiAgfSBlbHNlIGlmICh0eXBlID09PSBcImRvbnRFeGlzdHNcIikge1xyXG4gICAgZGl2QWxlcnQuYWRkQ2xhc3MoJ2FsZXJ0LWRvbnRFeGlzdHMnKS5maW5kKGNvbnRlbnRBbGVydCkudGV4dChcIldlIGNvdWxkbid0IGZpbmQgaXQgOihcIik7XHJcbiAgfVxyXG5cclxuICBkaXZBbGVydC5mYWRlSW4odGltZUluLCBcImxpbmVhclwiLCBmdW5jdGlvbigpIHtcclxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgIGRpdkFsZXJ0LmZhZGVPdXQoKS5hbmltYXRlKHtcclxuICAgICAgICAnYm90dG9tJzogJzAlJ1xyXG4gICAgICB9LCB7XHJcbiAgICAgICAgZHVyYXRpb246ICdzbG93JyxcclxuICAgICAgICBxdWV1ZTogZmFsc2VcclxuICAgICAgfSk7XHJcbiAgICB9LCB0aW1lT3V0KTtcclxuICB9KS5hbmltYXRlKHtcclxuICAgICdib3R0b20nOiAnMjB2aCdcclxuICB9LCB7XHJcbiAgICBkdXJhdGlvbjogJ3Nsb3cnLFxyXG4gICAgcXVldWU6IGZhbHNlXHJcbiAgfSk7XHJcblxyXG59XHJcblxyXG4vLy8vLy8vLy8vLy8gVmFsaWRhIGxvbmdpdHVkXHJcbmZ1bmN0aW9uIHZhbGlkYXRlTGVuZ3RoKHZhbG9yLCBtaW5MZW5ndGgsIG1heExlbmd0aCkge1xyXG4gIGlmICgodmFsb3IgPj0gbWluTGVuZ3RoKSAmICh2YWxvciA8PSBtYXhMZW5ndGgpKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuLy8vLy8vLy8vLy8vIHJlbW92ZSBjbGFzcyBjb3JlY3RvIG9uIGZvcm11bGFyaW9zXHJcbmZ1bmN0aW9uIGVtcHR5Q2xhc3MoZm9ybSkge1xyXG5cclxuICBsZXQgc2VsZWN0cyA9ICQoZm9ybSkuZmluZCgnc2VsZWN0Jyk7XHJcbiAgbGV0IGlucHV0cyA9ICQoZm9ybSkuZmluZCgnaW5wdXQnKTtcclxuXHJcblxyXG4gIHNlbGVjdHMudmFsKCdkZWZhdWx0JykucmVtb3ZlQ2xhc3MoJ2NvcnJlY3RvJyk7XHJcbiAgaW5wdXRzLnZhbCgnJykucmVtb3ZlQ2xhc3MoJ2NvcnJlY3RvJyk7XHJcblxyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZUZvcm0oZm9ybSkge1xyXG5cclxuICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gIGxldCBpbnB1dHMgPSAkKGZvcm0pLmZpbmQoJ2lucHV0LHNlbGVjdCcpO1xyXG4gIGxldCBjYW1wb3NPYmxpZ2EgPSAkKGZvcm0pLmZpbmQoJ2lucHV0OnZpc2libGUsc2VsZWN0OnZpc2libGUnKS5sZW5ndGg7XHJcbiAgbGV0IGJvdG9uU3VibWl0ID0gJChmb3JtKS5maW5kKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpO1xyXG5cclxuICAvL1ZhcmlhYmxlIHBhcmEgY29tcHJhciBsb3MgaW5wdXRzIHF1ZSBlc3RhbiBiaWVuIGNvbiBsYSBjYW50aWRhZCBkZSBpbnB1dHMgZGVsIGZvcm11bGFyaW9cclxuICBsZXQgdG90YWwgPSAwO1xyXG4gIC8vZXhwcmVzaW9uZXMgUmVndWxhcmVzXHJcbiAgY29uc3QgcmVnRXhwRW1haWwgPSAvXlthLXowLTkhIyQlJicqKy89P15fYHt8fX4tXSsoPzpcXC5bYS16MC05ISMkJSYnKisvPT9eX2B7fH1+LV0rKSpAKD86W2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pP1xcLikrW2EtejAtOV0oPzpbYS16MC05LV0qW2EtejAtOV0pPyQvO1xyXG4gIGNvbnN0IHJlZ0V4cE51bWJlciA9IC9eXFxkKyQvO1xyXG5cclxuXHJcblxyXG5cclxuICAvLy8vVmFsaWRhciBsb3MgY2FtcG9zXHJcbiAgJChmb3JtKS5maW5kKCdpbnB1dCxzZWxlY3QnKS5lYWNoKGZ1bmN0aW9uKGksIGUpIHtcclxuXHJcblxyXG4gICAgbGV0IHZhbG9ySW5wdXQgPSAkKGUpLnZhbCgpO1xyXG4gICAgbGV0IHZhbG9yQ2hlY2tib3ggPSAkKGUpLnByb3AoJ2NoZWNrZWQnKTtcclxuICAgIGxldCB2YWxvclNlbGVjdCA9ICQoZSkudmFsKCk7XHJcbiAgICBsZXQgY3VzdG9tRGl2Q2hlY2sgPSAkKGUpLnBhcmVudCgpLmZpbmQoJ2Rpdi5jdXN0b20tY2hlY2tib3gnKTtcclxuXHJcblxyXG4gICAgaWYgKCQoZSkubGVuZ3RoICE9PSAwKSB7XHJcbiAgICAgIHN3aXRjaCAoJChlKS5hdHRyKCd0eXBlJykpIHtcclxuXHJcbiAgICAgICAgY2FzZSBcInRleHRcIjpcclxuICAgICAgICAgIHZhbG9ySW5wdXQgIT09IFwiXCIgPyBwaW50YXJTdGlsb3MoJChlKSwgJ3ZhbGlkbycpIDogcGludGFyU3RpbG9zKCQoZSksICdlcnJvcicpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJwYXNzd29yZFwiOlxyXG4gICAgICAgICAgdmFsb3JJbnB1dCAhPT0gXCJcIiA/IHBpbnRhclN0aWxvcygkKGUpLCAndmFsaWRvJykgOiBwaW50YXJTdGlsb3MoJChlKSwgJ2Vycm9yJyk7XHJcbiAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgY2FzZSBcImRhdGVcIjpcclxuICAgICAgICAgIHZhbG9ySW5wdXQgIT09IFwiXCIgPyBwaW50YXJTdGlsb3MoJChlKSwgJ3ZhbGlkbycpIDogcGludGFyU3RpbG9zKCQoZSksICdlcnJvcicpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJpZGVudGlmaWNhdGlvblwiOlxyXG4gICAgICAgICAgaWYgKChyZWdFeHBOdW1iZXIudGVzdCgkKGUpLnByb3AoJ3ZhbHVlJykpKSAmICh2YWxpZGF0ZUxlbmd0aCh2YWxvcklucHV0Lmxlbmd0aCwgNSwgMTQpKSkge1xyXG4gICAgICAgICAgICBwaW50YXJTdGlsb3MoJChlKSwgJ3ZhbGlkbycpO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcGludGFyU3RpbG9zKCQoZSksICdlcnJvcicpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJlbWFpbEN1c3RvbVwiOlxyXG4gICAgICAgICAgcmVnRXhwRW1haWwudGVzdCgkKGUpLnByb3AoJ3ZhbHVlJykpID8gcGludGFyU3RpbG9zKCQoZSksICd2YWxpZG8nKSA6IHBpbnRhclN0aWxvcygkKGUpLCAnZXJyb3InKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICBjYXNlIFwiY2hlY2tib3hcIjpcclxuICAgICAgICAgIHZhbG9yQ2hlY2tib3ggIT09IGZhbHNlID8gcGludGFyU3RpbG9zKGN1c3RvbURpdkNoZWNrLCAndmFsaWRvJykgOiBwaW50YXJTdGlsb3MoY3VzdG9tRGl2Q2hlY2ssICdlcnJvcicpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgIGNhc2UgXCJzZWxlY3RcIjpcclxuICAgICAgICAgIHZhbG9yU2VsZWN0ICE9IFwiZGVmYXVsdFwiID8gcGludGFyU3RpbG9zKCQoZSksICd2YWxpZG8nKSA6IHBpbnRhclN0aWxvcygkKGUpLCAnZXJyb3InKTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJ5ZWFyXCI6XHJcbiAgICAgICAgICBpZiAoKHJlZ0V4cE51bWJlci50ZXN0KCQoZSkucHJvcCgndmFsdWUnKSkpICYgKHZhbGlkYXRlTGVuZ3RoKHZhbG9ySW5wdXQubGVuZ3RoLCA0LCA1KSkpIHtcclxuICAgICAgICAgICAgcGludGFyU3RpbG9zKCQoZSksICd2YWxpZG8nKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHBpbnRhclN0aWxvcygkKGUpLCAnZXJyb3InKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICAgIHRvdGFsID0gdG90YWwgKyBjdW1wbGU7XHJcbiAgICB9XHJcblxyXG4gIH0pO1xyXG5cclxuICBpZiAodG90YWwgPT09IGNhbXBvc09ibGlnYSkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG59XHJcbi8vIE5PVEU6IENPTkZJRyBDT05TVUxUQVNcclxuJC5hamF4U2V0dXAoe1xyXG4gIHVybDogJ3NlcnZpY2VzL3Byb2Nlc3MucGhwJyxcclxuICB0eXBlOiAnUE9TVCcsXHJcbiAgYXN5bmM6IHRydWUsXHJcbiAgZXJyb3I6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncmVzcG9uc2UnLCByZXNwb25zZSk7XHJcbiAgICBzaG93QWxlcnQoXCJzZXJ2ZXJEb3duXCIsIDEwMDAsIDMwMDApO1xyXG4gIH1cclxufSk7XHJcbi8vIE5PVEU6IExPRyBPVVRcclxuJCgnI2xvZ091dCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gICQucG9zdChcInNlcnZpY2VzL2xvZ2luLnBocD9sb2c9ZmFsc2VcIiwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgIHZhciBqc29uRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJDb29sXCIpIHtcclxuICAgICAgbG9jYXRpb24uaHJlZiA9ICdpbmRleC5waHAnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc2hvd0FsZXJ0KFwiZXJyb3JcIiwgMTAwMCwgMzAwMCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLy8gTk9URTogQ09OU1VMVEEgTE9HSU5cclxuJCgnZm9ybSNsb2dpbicpLnN1Ym1pdChmdW5jdGlvbihldmVudCkge1xyXG4gIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gIGxldCBmb3JtdWxhcmlvID0gJCh0aGlzKTtcclxuICBsZXQgZGF0YSA9IGZvcm11bGFyaW8uc2VyaWFsaXplKCk7XHJcbiAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG4gIGZvcm11bGFyaW8ucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5zaG93KCk7XHJcblxyXG4gICQucG9zdChcInNlcnZpY2VzL2xvZ2luLnBocD9sb2c9dHJ1ZVwiLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgZm9ybXVsYXJpby5wYXJlbnQoKS5maW5kKCcubG9hZGluZycpLmhpZGUoKTtcclxuICAgIGxldCBqc29uRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJDb29sXCIpIHtcclxuXHJcbiAgICAgIHNob3dBbGVydChcIm5pY2VcIiwgMTAwMCwgMzAwMCk7XHJcbiAgICAgIGxvY2F0aW9uLmhyZWYgPSAnaG9tZS5waHAnO1xyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNob3dBbGVydChcImVycm9yXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufSk7XHJcblxyXG5cclxuLy8vLyBOT1RFOiBCVVNDQURPUlxyXG5cclxudmFyIHBldGljaW9uO1xyXG52YXIgYnV0dG9uU2VhcmNoID0gJCgnI3NlYXJjaEFsbCcpO1xyXG5cclxuXHJcbmJ1dHRvblNlYXJjaC5rZXlwcmVzcyhmdW5jdGlvbigpIHtcclxuICBsZXQgYnV0dG9uVmFsdWUgPSBidXR0b25TZWFyY2gudmFsKCk7XHJcblxyXG4gIGlmIChidXR0b25WYWx1ZS5sZW5ndGggPiAwKSB7XHJcbiAgICBzZWFyY2hTdHVkZW50KGJ1dHRvblNlYXJjaCk7XHJcbiAgfVxyXG59KTtcclxuJCgnc3Bhbi5pY29uLXNlYXJjaCcpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG4gIGxldCBidXR0b25WYWx1ZSA9IGJ1dHRvblNlYXJjaC52YWwoKTtcclxuICBpZiAoYnV0dG9uVmFsdWUubGVuZ3RoID4gMCkge1xyXG5cclxuICAgIHNlYXJjaFN0dWRlbnQoYnV0dG9uU2VhcmNoKTtcclxuICB9XHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gc2VhcmNoU3R1ZGVudChidXR0b24pIHtcclxuXHJcblxyXG4gIGxldCB2YWx1ZSA9IGJ1dHRvbi52YWwoKTtcclxuICBsZXQgaW5wdXQgPSBidXR0b247XHJcblxyXG5cclxuICBjbGVhclRpbWVvdXQocGV0aWNpb24pO1xyXG4gIHBldGljaW9uID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgIGxldCBkYXRhID0gJ3R5cGVGb3JtPXNlYXJjaFN0dWRlbnQmJyArIGlucHV0LnNlcmlhbGl6ZSgpO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgJC5wb3N0KFwic2VydmljZXMvcHJvY2Vzcy5waHBcIiwgZGF0YSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgLy8gY29uc29sZS5sb2cocmVzcG9uc2UpO1xyXG4gICAgICB2YXIgc3R1ZGVudHMgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgIGlmIChzdHVkZW50cy5zdWNjZXNzID09IFwiRXJyb3JcIikge1xyXG4gICAgICAgIHNob3dBbGVydChcImVycm9yXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgICB9IGVsc2UgaWYgKHN0dWRlbnRzLnN1Y2Nlc3MgPT0gXCJEb24ndCBleGlzdHNcIikge1xyXG4gICAgICAgIHNob3dBbGVydChcImRvbnRFeGlzdHNcIiwgMTAwMCwgMzAwMCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICQoJ3RhYmxlI3N0dWRlbnRzJykuZmFkZUluKDUwMCk7XHJcbiAgICAgICAgc2hvd1N0dWRlbnRzKHN0dWRlbnRzKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH0sIDEwMDApO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc2hvd1N0dWRlbnRzKHN0dWRlbnRzKSB7XHJcbiAgbGV0IHJvbCA9IHN0dWRlbnRzLnNsaWNlKC0xKVswXS5yb2w7XHJcbiAgbGV0IHJvbGVPcHRpb25zID0gbnVsbDtcclxuXHJcblxyXG4gIHN3aXRjaCAocm9sKSB7XHJcbiAgICBjYXNlICdBZG1pbmlzdHJhZG9yJzpcclxuICAgICAgcm9sZU9wdGlvbnMgPSBgPHNwYW4gY2xhc3M9XCJpY29uLWV5ZVwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImljb24tY29pbi1kb2xsYXJcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJpY29uLXBsdXNcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJpY29uLWJpblwiPjwvc3Bhbj5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ0Nvb3JkaW5hZG9yJzpcclxuICAgICAgcm9sZU9wdGlvbnMgPSBgPHNwYW4gY2xhc3M9XCJpY29uLWV5ZVwiPjwvc3Bhbj5gO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgJ1Rlc29yZXJvJzpcclxuICAgICAgcm9sZU9wdGlvbnMgPSBgPHNwYW4gY2xhc3M9XCJpY29uLWV5ZVwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImljb24tY29pbi1kb2xsYXJcIj48L3NwYW4+YDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG5cclxuICB9XHJcblxyXG4gIC8vIE5PVEU6IERlbGV0ZSB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBhcnJheSBjdXogaXQncyB0aGUgcm9sXHJcbiAgc3R1ZGVudHMucG9wKC0xKTtcclxuXHJcbiAgJCgnI3Nob3dTdHVkZW50cycpLmVtcHR5KCk7XHJcbiAgJC5lYWNoKHN0dWRlbnRzLnNsaWNlKDApLCBmdW5jdGlvbihpZCwgc3R1ZGVudCkge1xyXG5cclxuXHJcblxyXG4gICAgJCgnI3Nob3dTdHVkZW50cycpLmFwcGVuZChcclxuICAgICAgYFxyXG4gICAgICA8dHI+XHJcbiAgICAgICAgPHRkIGRhdGEtc3R1ZGVudD1cIiR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnQuaWQpfVwiPiR7aWQrMX08L3RkPlxyXG4gICAgICAgIDx0ZD4ke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50LmRlc2NyaXBjaW9uX3Rkb2MpfTwvdGQ+XHJcbiAgICAgICAgPHRkIGRhdGEtbmRvYz1cIiR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnQubmRvYyl9XCI+JHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudC5uZG9jKX08L3RkPlxyXG4gICAgICAgIDx0ZD4ke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50Lm5vbWJyZTEpfSAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50Lm5vbWJyZTIpfTwvdGQ+XHJcbiAgICAgICAgPHRkPiR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnQuYXBlbGxpZG8xKX0gJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudC5hcGVsbGlkbzIpfTwvdGQ+XHJcbiAgICAgICAgPHRkIGNsYXNzPVwidGFibGUtb3B0aW9uc1wiPiR7cm9sZU9wdGlvbnN9PC90ZD5cclxuICAgICAgPC90cj5cclxuICAgICAgYFxyXG4gICAgKTtcclxuXHJcbiAgfSk7XHJcblxyXG4gIG9wdGlvbnNTdHVkZW50cygpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlTnVsbFZhbHVlKHN0cmluZykge1xyXG4gIHJldHVybiBzdHJpbmcgPT09IFwiTlVMTFwiID8gXCJcIiA6IHN0cmluZztcclxufVxyXG5cclxuZnVuY3Rpb24gb3B0aW9uc1N0dWRlbnRzKCkge1xyXG5cclxuXHJcbiAgJCgnc3Bhbi5pY29uLWNvaW4tZG9sbGFyJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgbGV0IG1vZGFsUGF5bWVudHMgPSAkKCcjbW9kYWxQYXltZW50cycpO1xyXG4gICAgbGV0IGlkU3R1ZGVudCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5maW5kKCd0ZFtkYXRhLXN0dWRlbnRdJykuYXR0cignZGF0YS1zdHVkZW50Jyk7XHJcblxyXG5cclxuXHJcbiAgICBtb2RhbFBheW1lbnRzLmZhZGVJbigpLmNzcyh7XHJcbiAgICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIlxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgICQoJ2Rpdi5tb250aCBzcGFuLmljb24tSWNvbkFycm93UHVycGxlJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG5cclxuICAgICAgbGV0IHB1cnBsZUFycm93ID0gJCh0aGlzKTtcclxuICAgICAgbGV0IHBheW1lbnRDb250YWluZXIgPSBwdXJwbGVBcnJvdy5jbG9zZXN0KCdsaScpLmZpbmQoJ2Rpdi5jb250YWluZXItcGF5bWVudCcpO1xyXG4gICAgICBsZXQgbW9udGggPSBwdXJwbGVBcnJvdy5wYXJlbnQoKS5hdHRyKCdkYXRhLW1vbnRoJyk7XHJcbiAgICAgIGxldCB5ZWFyID0gcHVycGxlQXJyb3cuY2xvc2VzdCgnLm1vZGFsJykuZmluZCgnI3NlYXJjaFBheW1lbnRzJykudmFsKCk7XHJcbiAgICAgIGxldCBkYXRhID0gYHR5cGVGb3JtPXNlYXJoUGF5bWVudHMmaWRTdHVkZW50PSR7aWRTdHVkZW50fSZ5ZWFyPSR7eWVhcn0mbW9udGg9JHttb250aH1gO1xyXG4gICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcbiAgICAgICQucG9zdChcInNlcnZpY2VzL3Byb2Nlc3MucGhwXCIsIGRhdGEsIGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcblxyXG4gICAgICAgIHZhciBwYXltZW50cyA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIGNvbnNvbGUudGFibGUocGF5bWVudHMpO1xyXG5cclxuICAgICAgICBpZiAocGF5bWVudHMuc3VjY2VzcyA9PSBcIkVycm9yXCIpIHtcclxuICAgICAgICAgIHNob3dBbGVydChcImVycm9yXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocGF5bWVudHMuc3VjY2VzcyA9PSBcIkRvbid0IGV4aXN0c1wiKSB7XHJcbiAgICAgICAgICBzaG93QWxlcnQoXCJkb250RXhpc3RzXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgc2hvd1BheW1lbnRzKHBheW1lbnRzLCBwYXltZW50Q29udGFpbmVyKTtcclxuICAgICAgICAgIHBheW1lbnRDb250YWluZXIuc2xpZGVUb2dnbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgZnVuY3Rpb24gc2hvd1BheW1lbnRzKHBheW1lbnRzLCBwYXltZW50Q29udGFpbmVyKSB7XHJcbiAgICAgICAgbGV0IHJvdyA9ICQocGF5bWVudENvbnRhaW5lcikuZmluZCgndGJvZHkuc2hvd1BheW1lbnRzJylcclxuICAgICAgICAkKHJvdykuZW1wdHkoKTtcclxuICAgICAgICAkLmVhY2gocGF5bWVudHMsIGZ1bmN0aW9uKGluZGV4LCBwYXltZW50KSB7XHJcblxyXG4gICAgICAgICAgJChyb3cpLmFwcGVuZChcclxuICAgICAgICAgICAgYFxyXG4gICAgICAgICAgICA8dHI+XHJcbiAgICAgICAgICAgICAgPHRkPiR7aW5kZXgrMX08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD4ke3BheW1lbnQuY29uc2VjdXRpdm99PC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+JHtwYXltZW50LmZlY2hhX3BhZ299PC90ZD5cclxuICAgICAgICAgICAgICA8dGQ+JHtwYXltZW50LnBlcmlvZG9faW5pY2lhbH08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD4ke3BheW1lbnQucGVyaW9kb19maW5hbH08L3RkPlxyXG4gICAgICAgICAgICAgIDx0ZD4ke3BheW1lbnQudmFsb3JfY2FuY2VsYWRvfTwvdGQ+XHJcbiAgICAgICAgICAgICAgPHRkIGNsYXNzPVwidGFibGUtb3B0aW9uc1wiPjxzcGFuIGNsYXNzPVwiaWNvbi1iaW5cIj48L3NwYW4+PC90ZD5cclxuICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgYFxyXG4gICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICB9XHJcblxyXG5cclxuICAgIH0pO1xyXG4gICAgJCgnZGl2Lm1vbnRoIHNwYW4uaWNvbi1wbHVzJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAgIGxldCBwbHVzQnV0dG9uID0gJCh0aGlzKTtcclxuICAgICAgbGV0IG1vbnRoID0gcGx1c0J1dHRvbi5wYXJlbnQoKS5hdHRyKCdkYXRhLW1vbnRoJyk7XHJcbiAgICAgIGxldCB5ZWFyID0gcGx1c0J1dHRvbi5jbG9zZXN0KCcubW9kYWwnKS5maW5kKCcjc2VhcmNoUGF5bWVudHMnKS52YWwoKTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgIGxldCBkYXRhID0gYHR5cGVGb3JtPWdldE1vbnRoJmlkU3R1ZGVudD0ke2lkU3R1ZGVudH0meWVhcj0ke3llYXJ9Jm1vbnRoPSR7bW9udGh9YDtcclxuICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG5cclxuICAgICAgJC5wb3N0KFwic2VydmljZXMvcHJvY2Vzcy5waHBcIiwgZGF0YSwgZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgdmFyIGN1b3RhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coY3VvdGFbMF0uaWQpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGN1b3RhLnN1Y2Nlc3MgPT0gXCJFcnJvclwiKSB7XHJcbiAgICAgICAgICBzaG93QWxlcnQoXCJlcnJvclwiLCAxMDAwLCAzMDAwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcGx1c0J1dHRvbi5jbG9zZXN0KCdsaScpLmZpbmQoJ2Rpdi5tb250aCcpLmF0dHIoJ2RhdGEtY3VvdGEnLCBjdW90YVswXS5pZCk7XHJcbiAgICAgICAgICBwbHVzQnV0dG9uLmNsb3Nlc3QoJ2xpJykuZmluZCgnLmNvbnRhaW5lci1hZGRQYXltZW50Jykuc2xpZGVUb2dnbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgdmFyIGxvY2tpID0gZmFsc2U7XHJcblxyXG4gICAgICAkKCdmb3JtLmFkZFBheW1lbnQnKS5zdWJtaXQoZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcblxyXG4gICAgICAgIGxldCBmb3JtID0gdGhpcztcclxuICAgICAgICBsZXQgdHlwZUZvcm0gPSAkKGZvcm0pLmF0dHIoJ2NsYXNzJyk7XHJcbiAgICAgICAgbGV0IGN1b3RhID0gJChmb3JtKS5jbG9zZXN0KCdsaScpLmZpbmQoJ2Rpdi5tb250aCcpLmF0dHIoJ2RhdGEtY3VvdGEnKTtcclxuXHJcbiAgICAgICAgaWYgKCFsb2NraSkge1xyXG4gICAgICAgICAgaWYgKHZhbGlkYXRlRm9ybSh0aGlzKSkge1xyXG5cclxuICAgICAgICAgICAgbGV0IGRhdGEgPSBgdHlwZUZvcm09JHt0eXBlRm9ybX0mY3VvdGE9JHtjdW90YX0mJHskKGZvcm0pLnNlcmlhbGl6ZSgpfWA7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAgICAgJC5hamF4KHtcclxuICAgICAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJChmb3JtKS5wYXJlbnQoKS5maW5kKCcubG9hZGluZycpLnNob3coKTtcclxuICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBsb2NraSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgJChmb3JtKS5wYXJlbnQoKS5maW5kKCcubG9hZGluZycpLmZhZGVPdXQoMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB2YXIganNvbkRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkNvb2xcIikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgZW1wdHlDbGFzcyhmb3JtKTtcclxuICAgICAgICAgICAgICAgICAgc2hvd0FsZXJ0KFwibmljZVwiLCAxMDAwLCAzMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJFcnJvclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgIHNob3dBbGVydChcImVycm9yXCIsIDEwMDAsIDMwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkVudHJ5IGR1cGxpY2F0ZVwiKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICBzaG93QWxlcnQoXCJlbnRyeUR1cGxpY2F0ZVwiLCAxMDAwLCAzMDAwLCAnVGhpcyByZWxhdGl2ZSBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfSk7XHJcblxyXG5cclxuICAvLy8vRWxpbWluYXIgRVNUVURJQU5URVxyXG5cclxuICAkKCdzcGFuLmljb24tYmluJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgbGV0IG1vZGFsRGVsZXRlID0gJCgnI21vZGFsRGVsZXRlJyk7XHJcbiAgICBsZXQgaW5wdXRNb2RhbCA9IG1vZGFsRGVsZXRlLmZpbmQoJ2lucHV0Jyk7XHJcbiAgICBsZXQgaWRTdHVkZW50ID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmZpbmQoJ3RkW2RhdGEtc3R1ZGVudF0nKS5hdHRyKCdkYXRhLXN0dWRlbnQnKTtcclxuICAgIGxldCBudW1Eb2NTdHVkZW50ID0gJCh0aGlzKS5jbG9zZXN0KCd0cicpLmZpbmQoJ3RkW2RhdGEtbmRvY10nKS5hdHRyKCdkYXRhLW5kb2MnKTs7XHJcblxyXG4gICAgaW5wdXRNb2RhbC5hdHRyKCdkYXRhLXN0dWRlbnQnLCBpZFN0dWRlbnQpO1xyXG5cclxuICAgIG1vZGFsRGVsZXRlLmZhZGVJbigpLmNzcyh7XHJcbiAgICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIlxyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gTk9URTogQ09OU1VMVEEgRUxJTUlOQVJcclxuICAgICQoJ2Zvcm0jZGVsZXRlU3R1ZGVudCcpLnN1Ym1pdChmdW5jdGlvbihldmVudCkge1xyXG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICBsZXQgZm9ybSA9IHRoaXM7XHJcbiAgICAgIGxldCBtb2RhbCA9ICQodGhpcykuY2xvc2VzdCgnLm1vZGFsJyk7XHJcbiAgICAgIGxldCB0eXBlRm9ybSA9ICQodGhpcykuYXR0cignaWQnKTtcclxuICAgICAgbGV0IGlucHV0ID0gJCh0aGlzKS5maW5kKCdpbnB1dCcpO1xyXG4gICAgICBsZXQgdHJTdHVkZW50ID0gJCgnI3Nob3dTdHVkZW50cycpLmZpbmQoYHRkW2RhdGEtc3R1ZGVudD1cIiR7aWRTdHVkZW50fVwiXWApLmNsb3Nlc3QoJ3RyJyk7XHJcblxyXG5cclxuICAgICAgaWYgKGlucHV0LnZhbCgpICE9PSBudW1Eb2NTdHVkZW50KSB7XHJcbiAgICAgICAgcGludGFyU3RpbG9zKCQoaW5wdXQpLCAnZXJyb3InKTtcclxuICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgcGludGFyU3RpbG9zKCQoaW5wdXQpLCAndmFsaWRvJyk7XHJcblxyXG4gICAgICAgIGxldCBkYXRhID0gYHR5cGVGb3JtPSR7dHlwZUZvcm19JmlkU3R1ZGVudD0ke2lkU3R1ZGVudH0mJHskKGZvcm0pLnNlcmlhbGl6ZSgpfWA7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQoZm9ybSkucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5zaG93KCk7XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICQoZm9ybSkucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5mYWRlT3V0KDEwMDApO1xyXG4gICAgICAgICAgICB2YXIganNvbkRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChqc29uRGF0YS5zdWNjZXNzID09IFwiQ29vbFwiKSB7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2codHJTdHVkZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgdHJTdHVkZW50LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgIG1vZGFsLmZhZGVPdXQoKTtcclxuICAgICAgICAgICAgICBlbXB0eUNsYXNzKGZvcm0pO1xyXG4gICAgICAgICAgICAgIHNob3dBbGVydChcIm5pY2VcIiwgMTAwMCwgMzAwMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkVycm9yXCIpIHtcclxuICAgICAgICAgICAgICBzaG93QWxlcnQoXCJlcnJvclwiLCAxMDAwLCAzMDAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIH1cclxuXHJcblxyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG5cclxuICAvLy8vTW9zdHJhciBJTkZPIC8gRURJVEFSXHJcbiAgJCgnc3Bhbi5pY29uLWV5ZScpLmNsaWNrKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIGxldCBtb2RhbFNob3cgPSAkKCcjbW9kYWxFZGl0U2hvdycpO1xyXG4gICAgbGV0IGlkU3R1ZGVudCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5maW5kKCd0ZFtkYXRhLXN0dWRlbnRdJykuYXR0cignZGF0YS1zdHVkZW50Jyk7XHJcblxyXG4gICAgbGV0IGRhdGEgPSBgdHlwZUZvcm09c2hvd1N0dWRlbnRJbmZvJmlkU3R1ZGVudD0ke2lkU3R1ZGVudH1gO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKCdsbyBxdWUgZW52aW8gJywgZGF0YSk7XHJcbiAgICAkLnBvc3QoXCJzZXJ2aWNlcy9wcm9jZXNzLnBocFwiLCBkYXRhLCBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZygncmVzcG9uc2Ugc3R1ZGVudCcsIHJlc3BvbnNlKTtcclxuICAgICAgdmFyIHN0dWRlbnRJbmZvID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICBpZiAoc3R1ZGVudEluZm8uc3VjY2VzcyA9PSBcIkVycm9yXCIpIHtcclxuICAgICAgICBzaG93QWxlcnQoXCJlcnJvclwiLCAxMDAwLCAzMDAwKTtcclxuICAgICAgfSBlbHNlIGlmIChzdHVkZW50SW5mby5zdWNjZXNzID09IFwiRG9uJ3QgZXhpc3RzXCIpIHtcclxuICAgICAgICBzaG93QWxlcnQoXCJkb250RXhpc3RzXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNob3dTdHVkZW50SW5mbyhzdHVkZW50SW5mbywgbW9kYWxTaG93KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuXHJcbiAgfSk7XHJcblxyXG4gIGZ1bmN0aW9uIHNob3dTdHVkZW50SW5mbyhzdHVkZW50SW5mbywgbW9kYWxTaG93KSB7XHJcblxyXG4gICAgLy8gY29uc29sZS50YWJsZShzdHVkZW50SW5mb1swXSk7XHJcblxyXG4gICAgbGV0IGlucHV0cyA9IG1vZGFsU2hvdy5maW5kKCdzZWxlY3QsaW5wdXQnKTtcclxuICAgIGxldCBzYXZlQnV0dG9ucyA9IG1vZGFsU2hvdy5maW5kKCcuYnRuLXN1Ym1pdE1vZGFsJyk7XHJcblxyXG4gICAgdmFyIHN0dWRlbnRJbnB1dHMgPSB7XHJcbiAgICAgIHRpdHRsZTogJCgnI3BlcnNvbk5hbWUnKSxcclxuICAgICAgbmFtZXM6ICQoJyNlZGl0Tm9tYnJlc0VzdHUnKSxcclxuICAgICAgc3VybmFtZXM6ICQoJyNlZGl0QXBlbGxpZG9zRXN0dScpLFxyXG4gICAgICBudW1JZGVudDogJCgnI2VkaXROdW1JZGVudEVzdHUnKSxcclxuICAgICAgdGRvYzogJCgnI2VkaXRUaXBvSWRlbnRFc3R1JyksXHJcbiAgICAgIGV4cGVkaXRpb25QbGFjZTogJCgnI2VkaXRMdWdhckV4cGUnKSxcclxuICAgICAgYmlydGhkYXRlOiAkKCcjZWRpdEZlY2hhTmFjaScpLFxyXG4gICAgICBiaXJ0aHBsYWNlOiAkKCcjZWRpdEx1Z2FyTmFjaScpLFxyXG4gICAgICBhZGRyZXNzOiAkKCcjZWRpdERpcmVjY2lvbkVzdHUnKSxcclxuICAgICAgZW1haWw6ICQoJyNlZGl0RW1haWxFc3R1JyksXHJcbiAgICAgIHRlbDE6ICQoJyNlZGl0VGVsUmVzaUVzdHUnKSxcclxuICAgICAgZXBzOiAkKCcjZWRpdEVwcycpLFxyXG4gICAgICByaDogJCgnI2VkaXRSaCcpLFxyXG4gICAgICBpbmNvbWU6ICQoJyNlZGl0RXN0cmF0bycpXHJcbiAgICB9XHJcbiAgICBtb2RhbFNob3cuZmFkZUluKCkuY3NzKHtcclxuICAgICAgXCJkaXNwbGF5XCI6IFwiZmxleFwiXHJcbiAgICB9KTtcclxuICAgIGlucHV0cy5hdHRyKCdkaXNhYmxlZCcsIHRydWUpO1xyXG4gICAgc2F2ZUJ1dHRvbnMuaGlkZSgpO1xyXG4gICAgc3R1ZGVudElucHV0cy50aXR0bGUuYXR0cihgZGF0YS1zdHVkZW50YCwgc3R1ZGVudEluZm9bMF0uaWQpO1xyXG4gICAgc3R1ZGVudElucHV0cy50aXR0bGUudGV4dChgJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudEluZm9bMF0ubm9tYnJlMSl9ICR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLm5vbWJyZTIpfSAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5hcGVsbGlkbzEpfSAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5hcGVsbGlkbzIpfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5uYW1lcy52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLm5vbWJyZTEpfSAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5ub21icmUyKX1gKTtcclxuICAgIHN0dWRlbnRJbnB1dHMuc3VybmFtZXMudmFsKGAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5hcGVsbGlkbzEpfSAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5hcGVsbGlkbzIpfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5udW1JZGVudC52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLm5kb2MpfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy50ZG9jLnZhbChgJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudEluZm9bMF0udGRvY19wZXJzb25hKX1gKTtcclxuICAgIHN0dWRlbnRJbnB1dHMuZXhwZWRpdGlvblBsYWNlLnZhbChgJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudEluZm9bMF0ubHVnYXJfZXhwZWRpY2lvbil9YCk7XHJcbiAgICBzdHVkZW50SW5wdXRzLmJpcnRoZGF0ZS52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLmZlY2hhX25hY2ltaWVudG8pfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5iaXJ0aHBsYWNlLnZhbChgJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudEluZm9bMF0ubHVnYXJfbmFjaW1pZW50byl9YCk7XHJcbiAgICBzdHVkZW50SW5wdXRzLmFkZHJlc3MudmFsKGAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5kaXJlY2Npb24pfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5lbWFpbC52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLmVtYWlsKX1gKTtcclxuICAgIHN0dWRlbnRJbnB1dHMudGVsMS52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLnRlbDEpfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5lcHMudmFsKGAke2NoYW5nZU51bGxWYWx1ZShzdHVkZW50SW5mb1swXS5lcHMpfWApO1xyXG4gICAgc3R1ZGVudElucHV0cy5yaC52YWwoYCR7Y2hhbmdlTnVsbFZhbHVlKHN0dWRlbnRJbmZvWzBdLnJoKX1gKTtcclxuICAgIHN0dWRlbnRJbnB1dHMuaW5jb21lLnZhbChgJHtjaGFuZ2VOdWxsVmFsdWUoc3R1ZGVudEluZm9bMF0uZXN0cmF0byl9YCk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIC8vLy9OVUVWQSBNQVRSSUNVTEFcclxuICAkKCcjc2hvd1N0dWRlbnRzIHNwYW4uaWNvbi1wbHVzJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgbGV0IG1vZGFsTWF0cmkgPSAkKCcjbW9kYWxNYXRyaWN1bGEnKTtcclxuICAgIGxldCBpbnB1dE1vZGFsID0gbW9kYWxNYXRyaS5maW5kKCdpbnB1dCNudW1NYXRyaScpO1xyXG4gICAgbGV0IGlkU3R1ZGVudCA9ICQodGhpcykuY2xvc2VzdCgndHInKS5maW5kKCd0ZFtkYXRhLXN0dWRlbnRdJykuYXR0cignZGF0YS1zdHVkZW50Jyk7XHJcbiAgICBsZXQgbmFtZVN0dWRlbnQgPSAkKHRoaXMpLmNsb3Nlc3QoJ3RyJykuZmluZCgndGRbZGF0YS1zdHVkZW50XScpLmF0dHIoJ2RhdGEtc3R1ZGVudCcpO1xyXG5cclxuICAgIG1vZGFsTWF0cmkuZmFkZUluKCkuY3NzKHtcclxuICAgICAgXCJkaXNwbGF5XCI6IFwiZmxleFwiXHJcbiAgICB9KTtcclxuXHJcbiAgICBtb2RhbE1hdHJpLmZpbmQoJ2gxJykudGV4dCgnanVhbicpO1xyXG5cclxuXHJcbiAgICAvLyBOT1RFOiBDT05TVUxUQSBOVUVWQSBNQVRSSUNVTEFcclxuICAgICQoJ2Zvcm0jaW5zZXJ0TWF0cmljdWxhJykuc3VibWl0KGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIGxldCBmb3JtID0gdGhpcztcclxuICAgICAgbGV0IG1vZGFsID0gJCh0aGlzKS5jbG9zZXN0KCcubW9kYWwnKTtcclxuICAgICAgbGV0IHR5cGVGb3JtID0gJCh0aGlzKS5hdHRyKCdpZCcpO1xyXG5cclxuXHJcbiAgICAgIGlmICh2YWxpZGF0ZUZvcm0odGhpcykpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IGB0eXBlRm9ybT0ke3R5cGVGb3JtfSZpZFN0dWRlbnQ9JHtpZFN0dWRlbnR9JiR7JChmb3JtKS5zZXJpYWxpemUoKX1gO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuICAgICAgICAkLmFqYXgoe1xyXG4gICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgIGJlZm9yZVNlbmQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAkKGZvcm0pLnBhcmVudCgpLmZpbmQoJy5sb2FkaW5nJykuc2hvdygpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICQoZm9ybSkucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5mYWRlT3V0KDEwMDApO1xyXG4gICAgICAgICAgICB2YXIganNvbkRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJDb29sXCIpIHtcclxuICAgICAgICAgICAgICBtb2RhbC5mYWRlT3V0KCk7XHJcbiAgICAgICAgICAgICAgZW1wdHlDbGFzcyhmb3JtKTtcclxuICAgICAgICAgICAgICBzaG93QWxlcnQoXCJuaWNlXCIsIDEwMDAsIDMwMDApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJFcnJvclwiKSB7XHJcbiAgICAgICAgICAgICAgc2hvd0FsZXJ0KFwiZXJyb3JcIiwgMTAwMCwgMzAwMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkVudHJ5IGR1cGxpY2F0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgc2hvd0FsZXJ0KFwiZW50cnlEdXBsaWNhdGVcIiwgMTAwMCwgMzAwMCwgJ1RoaXMgc3R1ZGVudCBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gIH0pO1xyXG59XHJcblxyXG5cclxuXHJcbi8vIE5PVEU6IENPTlNVTFRBIEVESVRcclxuJCgnZm9ybS5lZGl0Jykuc3VibWl0KGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgbGV0IGZvcm0gPSB0aGlzO1xyXG4gIGxldCBtb2RhbCA9ICQoZm9ybSkuY2xvc2VzdCgnLm1vZGFsJyk7XHJcbiAgbGV0IHR5cGVGb3JtID0gJChmb3JtKS5hdHRyKCdpZCcpO1xyXG4gIGxldCBpZFN0dWRlbnQgPSAkKCcjcGVyc29uTmFtZScpLmF0dHIoJ2RhdGEtc3R1ZGVudCcpO1xyXG4gIGxldCBpbnB1dHMgPSAkKGZvcm0pLmZpbmQoJ2lucHV0Jyk7XHJcbiAgbGV0IHNlbGVjdHMgPSAkKGZvcm0pLmZpbmQoJ3NlbGVjdCcpO1xyXG4gIHZhciBkYXRhID0gJChmb3JtKS5zZXJpYWxpemUoKTtcclxuXHJcblxyXG4gIGlmICh2YWxpZGF0ZUZvcm0oZm9ybSkpIHtcclxuXHJcbiAgICBsZXQgZGF0YSA9IGB0eXBlRm9ybT0ke3R5cGVGb3JtfSZpZFN0dWRlbnQ9JHtpZFN0dWRlbnR9JiR7JChmb3JtKS5zZXJpYWxpemUoKX1gO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJChmb3JtKS5wYXJlbnQoKS5maW5kKCcubG9hZGluZycpLnNob3coKTtcclxuICAgICAgfSxcclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgICAkKGZvcm0pLnBhcmVudCgpLmZpbmQoJy5sb2FkaW5nJykuZmFkZU91dCgxMDAwKTtcclxuICAgICAgICB2YXIganNvbkRhdGEgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcclxuICAgICAgICBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkNvb2xcIikge1xyXG4gICAgICAgICAgbW9kYWwuZmFkZU91dCgpO1xyXG4gICAgICAgICAgZW1wdHlDbGFzcyhmb3JtKTtcclxuICAgICAgICAgIHNlYXJjaFN0dWRlbnQoYnV0dG9uU2VhcmNoKTtcclxuICAgICAgICAgIHNob3dBbGVydChcIm5pY2VcIiwgMTAwMCwgMzAwMCk7XHJcblxyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJFcnJvclwiKSB7XHJcbiAgICAgICAgICBzaG93QWxlcnQoXCJlcnJvclwiLCAxMDAwLCAzMDAwKTtcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vIE5PVEU6IENPTlNVTFRBIEVESVRBUiBVU0VSTkFNRVxyXG4kKCdmb3JtI2VkaXRVc2VybmFtZScpLnN1Ym1pdChmdW5jdGlvbihldmVudCkge1xyXG4gIGluc2VydFBlcnNvbih0aGlzLCBmYWxzZSk7XHJcbn0pO1xyXG5cclxuLy8gTk9URTogQ09OU1VMVEEgRURJVEFSIFBBU1NXT1JEXHJcbiQoJ2Zvcm0jZWRpdFBhc3N3b3JkJykuc3VibWl0KGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgaW5zZXJ0UGVyc29uKHRoaXMsIGZhbHNlKTtcclxufSk7XHJcblxyXG4vLyBOT1RFOiBDT05TVUxUQSBOVUVWTyBFU1RVRElBTlRFXHJcbiQoJ2Zvcm0jaW5zZXJ0U3R1ZGVudCcpLnN1Ym1pdChmdW5jdGlvbihldmVudCkge1xyXG5cclxuICBpbnNlcnRQZXJzb24odGhpcyk7XHJcbn0pO1xyXG5cclxuLy8gTk9URTogQ09OU1VMVEEgTlVFVk8gUkVTUE9OU0FCTEVcclxuJCgnI2FkZFJlbGF0aXZlJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gIGxldCBtb2RhbCA9ICQoJyNtb2RhbE5ld1JlbGF0aXZlJyk7XHJcbiAgbGV0IGNsb3Nlc3RNb2RhbCA9ICQodGhpcykuY2xvc2VzdCgnLm1vZGFsJyk7XHJcbiAgbGV0IGlkU3R1ZGVudCA9IGNsb3Nlc3RNb2RhbC5maW5kKCcjcGVyc29uTmFtZScpLmF0dHIoJ2RhdGEtc3R1ZGVudCcpO1xyXG5cclxuXHJcbiAgY2xvc2VzdE1vZGFsLmNzcyh7XHJcbiAgICBcInotaW5kZXhcIjogXCIxMFwiXHJcbiAgfSlcclxuXHJcbiAgbW9kYWwuZmFkZUluKCkuY3NzKHtcclxuICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIixcclxuICB9KTtcclxuXHJcbiAgdmFyIGxvY2sgPSBmYWxzZTtcclxuICAkKCdmb3JtI2luc2VydFJlbGF0aXZlJykuc3VibWl0KGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICBsZXQgZm9ybSA9ICQodGhpcyk7XHJcbiAgICBsZXQgdHlwZUZvcm0gPSBmb3JtLmF0dHIoJ2lkJyk7XHJcbiAgICBsZXQgYnV0dG9uID0gZm9ybS5maW5kKCdidXR0b25bdHlwZT1cInN1Ym1pdFwiXScpO1xyXG5cclxuXHJcbiAgICBpZiAodmFsaWRhdGVGb3JtKGZvcm0pKSB7XHJcbiAgICAgIGlmICghbG9jaykge1xyXG4gICAgICAgIGxldCBkYXRhID0gYHR5cGVGb3JtPSR7dHlwZUZvcm19JmlkU3R1ZGVudD0ke2lkU3R1ZGVudH0mJHtmb3JtLnNlcmlhbGl6ZSgpfWA7XHJcbiAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcblxyXG4gICAgICAgICQuYWpheCh7XHJcbiAgICAgICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGZvcm0ucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGxvY2sgPSB0cnVlO1xyXG4gICAgICAgICAgICBmb3JtLnBhcmVudCgpLmZpbmQoJy5sb2FkaW5nJykuZmFkZU91dCgxMDAwKTtcclxuICAgICAgICAgICAgdmFyIGpzb25EYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkNvb2xcIikge1xyXG5cclxuXHJcblxyXG4gICAgICAgICAgICAgIGZvcm0uY2xvc2VzdCgnLm1vZGFsJykuZmFkZU91dCgpO1xyXG5cclxuICAgICAgICAgICAgICBlbXB0eUNsYXNzKGZvcm0pO1xyXG4gICAgICAgICAgICAgIHNob3dBbGVydChcIm5pY2VcIiwgMTAwMCwgMzAwMCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJFcnJvclwiKSB7XHJcbiAgICAgICAgICAgICAgc2hvd0FsZXJ0KFwiZXJyb3JcIiwgMTAwMCwgMzAwMCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGpzb25EYXRhLnN1Y2Nlc3MgPT0gXCJFbnRyeSBkdXBsaWNhdGVcIikge1xyXG5cclxuICAgICAgICAgICAgICBzaG93QWxlcnQoXCJlbnRyeUR1cGxpY2F0ZVwiLCAxMDAwLCAzMDAwLCAnVGhpcyByZWxhdGl2ZSBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuXHJcblxyXG59KTtcclxuXHJcblxyXG5cclxuXHJcbmZ1bmN0aW9uIGluc2VydFBlcnNvbihmb3JtLCBjbG9zZU1vZGFsID0gdHJ1ZSkge1xyXG5cclxuICBsZXQgdHlwZUZvcm0gPSAkKGZvcm0pLmF0dHIoJ2lkJyk7XHJcblxyXG5cclxuICBpZiAodmFsaWRhdGVGb3JtKGZvcm0pKSB7XHJcblxyXG4gICAgdmFyIGRhdGEgPSBgdHlwZUZvcm09JHt0eXBlRm9ybX0mJHskKGZvcm0pLnNlcmlhbGl6ZSgpfWA7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRhKTtcclxuXHJcbiAgICAkLmFqYXgoe1xyXG4gICAgICBkYXRhOiBkYXRhLFxyXG4gICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAkKGZvcm0pLnBhcmVudCgpLmZpbmQoJy5sb2FkaW5nJykuc2hvdygpO1xyXG4gICAgICB9LFxyXG4gICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICQoZm9ybSkucGFyZW50KCkuZmluZCgnLmxvYWRpbmcnKS5mYWRlT3V0KDEwMDApO1xyXG4gICAgICAgIHZhciBqc29uRGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UpO1xyXG4gICAgICAgIGlmIChqc29uRGF0YS5zdWNjZXNzID09IFwiQ29vbFwiKSB7XHJcblxyXG4gICAgICAgICAgaWYgKGNsb3NlTW9kYWwpIHtcclxuICAgICAgICAgICAgJChmb3JtKS5jbG9zZXN0KCcubW9kYWwnKS5mYWRlT3V0KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBlbXB0eUNsYXNzKGZvcm0pO1xyXG4gICAgICAgICAgc2hvd0FsZXJ0KFwibmljZVwiLCAxMDAwLCAzMDAwKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChqc29uRGF0YS5zdWNjZXNzID09IFwiRXJyb3JcIikge1xyXG4gICAgICAgICAgc2hvd0FsZXJ0KFwiZXJyb3JcIiwgMTAwMCwgMzAwMCk7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoanNvbkRhdGEuc3VjY2VzcyA9PSBcIkVudHJ5IGR1cGxpY2F0ZVwiKSB7XHJcblxyXG4gICAgICAgICAgc2hvd0FsZXJ0KFwiZW50cnlEdXBsaWNhdGVcIiwgMTAwMCwgMzAwMCwgJ1RoaXMgc3R1ZGVudCBhbHJlYWR5IGV4aXN0cycpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuJC5nZXRKU09OKCdhc3NldHMvanNvbi9jaXR5cy5qc29uJywgZnVuY3Rpb24oZGF0YSkge1xyXG4gIC8vIHZhciBqc29uRGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgdmFyIG9wdGlvbnMgPSBbXTtcclxuICBsZXQgc2VsZWN0ID0gJCgnc2VsZWN0LmNpdHlzJyk7XHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgZm9yICh2YXIgeiA9IDA7IHogPCBkYXRhW2ldLmNpdWRhZGVzLmxlbmd0aDsgeisrKSB7XHJcbiAgICAgIG9wdGlvbnMucHVzaChcIjxvcHRpb24gdmFsdWU9J1wiICsgZGF0YVtpXS5jaXVkYWRlc1t6XSArIFwiJz5cIiArIGRhdGFbaV0uZGVwYXJ0YW1lbnRvICsgJy0nICsgZGF0YVtpXS5jaXVkYWRlc1t6XSArIFwiPC9vcHRpb24+XCIpO1xyXG4gICAgfVxyXG4gIH1cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uc1tpXSk7XHJcbiAgfVxyXG5cclxufSk7XHJcblxyXG4kLmdldEpTT04oJ2Fzc2V0cy9qc29uL2Jsb29kVHlwZXMuanNvbicsIGZ1bmN0aW9uKGRhdGEpIHtcclxuXHJcbiAgdmFyIG9wdGlvbnMgPSBbXTtcclxuICBsZXQgc2VsZWN0ID0gJCgnc2VsZWN0LmJsb29kVHlwZXMnKTtcclxuXHJcbiAgJC5lYWNoKGRhdGEsIGZ1bmN0aW9uKGtleSkge1xyXG4gICAgb3B0aW9ucy5wdXNoKFwiPG9wdGlvbiB2YWx1ZT0nXCIgKyBrZXkgKyBcIic+XCIgKyBrZXkgKyBcIjwvb3B0aW9uPlwiKTtcclxuICB9KVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uc1tpXSk7XHJcbiAgfVxyXG5cclxufSk7XHJcblxyXG4kLmdldEpTT04oJ2Fzc2V0cy9qc29uL2Vwcy5qc29uJywgZnVuY3Rpb24oZGF0YSkge1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IFtdO1xyXG4gIGxldCBzZWxlY3QgPSAkKCdzZWxlY3QuZXBzcycpO1xyXG5cclxuICAkLmVhY2goZGF0YSwgZnVuY3Rpb24oa2V5LCBlcHMpIHtcclxuXHJcbiAgICBvcHRpb25zLnB1c2goXCI8b3B0aW9uIHZhbHVlPSdcIiArIGVwcy5uYW1lICsgXCInPlwiICsgZXBzLm5hbWUgKyBcIjwvb3B0aW9uPlwiKTtcclxuICB9KVxyXG5cclxuICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICAgIHNlbGVjdC5hcHBlbmQob3B0aW9uc1tpXSk7XHJcbiAgfVxyXG5cclxufSk7XHJcblxyXG4kLmdldEpTT04oJ2Fzc2V0cy9qc29uL2dyYWRlcy5qc29uJywgZnVuY3Rpb24oZGF0YSkge1xyXG5cclxuICB2YXIgb3B0aW9ucyA9IFtdO1xyXG4gIGxldCBzZWxlY3QgPSAkKCdzZWxlY3QuZ3JhZGVzJyk7XHJcblxyXG4gICQuZWFjaChkYXRhLCBmdW5jdGlvbihrZXksIGVwcykge1xyXG5cclxuICAgIG9wdGlvbnMucHVzaChcIjxvcHRpb24gdmFsdWU9J1wiICsgZXBzLm5hbWUgKyBcIic+XCIgKyBlcHMubmFtZSArIFwiPC9vcHRpb24+XCIpO1xyXG4gIH0pXHJcblxyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgc2VsZWN0LmFwcGVuZChvcHRpb25zW2ldKTtcclxuICB9XHJcblxyXG59KTtcclxuIiwiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XHJcbiAgLy9WQWxpZGFyIHNpIGVsIG5hdmVnYWRvciBlcyBJRS4gU2kgbG8gZXMsIGRpcmVjY2lvbmFybG8gYSBvdHJhIHBhZ2luYVxyXG4gIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJUcmlkZW50L1wiKSA+IC0xKSB7XHJcbiAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9ICdodHRwczovL3d3dy5nb29nbGUuY29tLm14L2Nocm9tZS8/YnJhbmQ9Q0hCRiZkc19raWQ9NDM3MDAwMzQ2MzI3NDg2OTQmdXRtX3NvdXJjZT1iaW5nJnV0bV9tZWRpdW09Y3BjJnV0bV9jYW1wYWlnbj0xMDA1OTkyJTIwJTdDJTIwQ2hyb21lJTIwV2luMTAlMjAlN0MlMjBEUiUyMCU3QyUyMEVTUzAxJTIwJTdDJTIwTkElMjAlN0MlMjBOQSUyMCU3QyUyMGVzJTIwJTdDJTIwRGVzayUyMCU3QyUyMEJJTkclMjBTRU0lMjAlN0MlMjBCS1dTJTIwfiUyMFRvcCUyMEtXRFMlMjAtJTIwRXhhY3QmdXRtX3Rlcm09ZGVzY2FyZ2FyJTIwY2hyb21lJnV0bV9jb250ZW50PURvd25sb2FkJTIwQ2hyb21lJTIwLSUyMEV4YWN0JmdjbGlkPUNPNzBtNlRULWVVQ0ZVVENEUW9kbWl3RFJRJmdjbHNyYz1kcydcclxuICB9XHJcbiAgLy9GYWRlIGluIGRlIGxhIHDDoWdpbmEgTG9naW4gYWwgaW5pY2lhciBlbCBuYXZlZ2Fkb3JcclxuXHJcbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICQoJ3NlY3Rpb24jbG9naW4nKS5mYWRlSW4oMTUwMCkuY3NzKHtcclxuICAgICAgXCJkaXNwbGF5XCI6IFwiZmxleFwiXHJcbiAgICB9KTtcclxuICB9LCA1MDApO1xyXG4gIC8vSW5pY2lhbGl6YXIgbGFzIGFuaW1hY2lvbmVzIGRlIGxhIGxpYnJlcmlhIFdPVyAoYW5pbWFjaW9uZXMpXHJcbiAgdmFyIHdvdyA9IG5ldyBXT1coKS5pbml0KCk7XHJcblxyXG4gIC8vIEhhY2VyIHF1ZSBsb3MgY2hlY2tib3ggY29uIGVzdGlsb3MgZnVuY2lvbmVuXHJcbiAgJCgnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgY3VzdG9tQ2hlY2sgPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJ2Rpdi5jdXN0b20tY2hlY2tib3gnKTtcclxuICAgICQodGhpcykucHJvcCgnY2hlY2tlZCcpID8gY3VzdG9tQ2hlY2sudGV4dCgn4pyUJykgOiBjdXN0b21DaGVjay50ZXh0KCcnKTtcclxuICB9KTtcclxuXHJcbiAgLy8gRWZlY3RvcyBtZW51IGJ1cmd1ZXJcclxuICAkKCdkaXYuaWNvbi1tZW51JykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgbWVudSA9ICQoJ2Rpdi5tZW51LWNvbnRhaW5lcicpO1xyXG4gICAgaWYgKG1lbnUuY3NzKCdkaXNwbGF5JykgPT0gXCJub25lXCIpIHtcclxuICAgICAgbWVudS5zbGlkZURvd24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1lbnUuc2xpZGVVcCgpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAkKCcjYWNvdW50YnRuJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICBsZXQgYWNvdW50Q29udGFpbmVyID0gJCgnLmFjY291bnQtY29udGFpbmVyJyk7XHJcbiAgICBpZiAoYWNvdW50Q29udGFpbmVyLmNzcygnZGlzcGxheScpID09IFwibm9uZVwiKSB7XHJcbiAgICAgIGFjb3VudENvbnRhaW5lci5zbGlkZURvd24oKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGFjb3VudENvbnRhaW5lci5zbGlkZVVwKCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG4gIC8vTW9kYWxlc1xyXG5cclxuICAvLy8vRWRpdGFyIHVzdWVhcmlvXHJcbiAgJCgnI2VkaXRVc2VyJykuY2xpY2soZnVuY3Rpb24oKSB7XHJcbiAgICAkKCcjbW9kYWxFZGl0VXNlcicpLmZhZGVJbigpLmNzcyh7XHJcbiAgICAgIFwiZGlzcGxheVwiOiBcImZsZXhcIlxyXG4gICAgfSk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAvLy8vTlVFVk8gRVNUVURJQU5URVxyXG4gICQoJyNuZXdTdHVkZW50JykuY2xpY2soZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgbGV0IG1vZGFsID0gJCgnI21vZGFsTmV3U3R1ZGVudCcpO1xyXG5cclxuICAgIGxldCBjbG9zZXN0TW9kYWwgPSAkKHRoaXMpLmNsb3Nlc3QoJy5tb2RhbCcpO1xyXG5cclxuXHJcbiAgICBjbG9zZXN0TW9kYWwuY3NzKHtcInotaW5kZXhcIjogXCIxMFwifSlcclxuXHJcbiAgICBtb2RhbC5mYWRlSW4oKS5jc3Moe1xyXG4gICAgICBcImRpc3BsYXlcIjogXCJmbGV4XCIsXHJcbiAgICB9KTtcclxuXHJcblxyXG4gIH0pO1xyXG5cclxuXHJcbiAgLy8vL0NlcnJhciBtb2RhbGVzXHJcbiAgJCgnLmJ0bi1jYW5jZWwnKS5jbGljayhmdW5jdGlvbigpIHtcclxuICAgICQodGhpcykuY2xvc2VzdCgnLm1vZGFsLC5tb2RhbC10aXR0bGUnKS5mYWRlT3V0KCk7XHJcbiAgICAvLyAkKCcubG9hZGluZycpLmZhZGVPdXQoKTtcclxuICAgICQoJy5hbGVydC1jb250YWluZXInKS5mYWRlT3V0KCk7XHJcbiAgfSk7XHJcblxyXG5cclxuICAkKCcjYnRuLWVkaXRTdHVkZW50JykuY2xpY2soZnVuY3Rpb24oKXtcclxuICAgIGxldCBtb2RhbCA9ICQodGhpcykuY2xvc2VzdCgnLm1vZGFsJyk7XHJcbiAgICBsZXQgaW5wdXRzID0gbW9kYWwuZmluZCgnc2VsZWN0LGlucHV0Jyk7XHJcblxyXG4gICAgbW9kYWwuZmluZCgnLmJ0bi1zdWJtaXRNb2RhbCcpLmZhZGVJbignNTAwJyk7XHJcbiAgICBpbnB1dHMuYXR0cignZGlzYWJsZWQnLCBmYWxzZSk7XHJcbiAgfSk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgLy9UYWJsYXNcclxuICAkKHdpbmRvdykucmVzaXplKGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoIDw9IDUyMCkge1xyXG4gICAgICAkKCd0YWJsZSwuY29udGFpbmVyLXBheW1lbnQnKS5jc3Moe1xyXG4gICAgICAgIFwib3ZlcmZsb3cteFwiOiBcInNjcm9sbFwiXHJcbiAgICAgIH0pO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICQoJ3RhYmxlLC5jb250YWluZXItcGF5bWVudCcpLmNzcyh7XHJcbiAgICAgICAgXCJvdmVyZmxvdy14XCI6IFwiaGlkZGVuXCJcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcblxyXG5cclxuXHJcblxyXG59KTtcclxuIl19
